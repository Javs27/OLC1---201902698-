/* The following code was generated by JFlex 1.4.3 on 19/09/22 08:56 PM */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/09/22 08:56 PM from the specification file
 * <tt>C:/Users/pjbco/Desktop/Segundo semestre 2022/Compi1/Proyecto1Compiladores/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0, 25,  0,  0, 44,  0, 26, 35, 36,  6, 33, 40, 34,  0,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 45, 39,  0, 32, 43, 47, 
     0, 21, 20,  9, 22, 13, 11, 19, 17,  7, 31, 27, 14, 24,  8, 10, 
    29, 30, 18, 15, 12, 23, 28, 16, 27, 48, 27, 41,  0, 42,  0,  1, 
     0, 21, 20,  9, 22, 13, 11, 19, 17,  7, 31, 27, 14, 24,  8, 10, 
    29, 30, 18, 15, 12, 23, 28, 16, 27, 48, 27, 37,  0, 38,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 46, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\16\1"+
    "\1\6\3\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\0\1\1\2\0\1\26\7\0\1\27\10\0"+
    "\1\30\16\0\1\31\1\0\1\32\3\0\1\33\1\0"+
    "\1\34\2\0\1\35\11\0\1\36\40\0\1\37\1\40"+
    "\2\0\1\41\6\0\1\42\22\0\1\43\2\0\1\44"+
    "\1\3\16\0\1\45\1\46\6\0\1\47\1\50\1\51"+
    "\1\52\3\0\1\53\4\0\1\54\3\0\1\55\2\0"+
    "\1\56\4\0\1\57\1\0\1\60\12\0\1\61\4\0"+
    "\1\62\2\0\1\63\1\0\1\64\16\0\1\65\6\0"+
    "\1\66\1\67\5\0\1\70\1\71\3\0\1\72\4\0"+
    "\1\73\1\74\1\75\1\54\1\0\1\76\1\0\1\77"+
    "\1\100\1\0\1\101\2\0\1\102\2\0\1\103\2\0"+
    "\1\104\3\0\1\105\1\0\1\106\5\0\1\107\2\0"+
    "\1\110\2\0\1\111\5\0\1\112\5\0\1\113\1\0"+
    "\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\61\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\61\0\61\0\u0498\0\u04c9\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\u04fa\0\u052b\0\u055c\0\u058d\0\61\0\u05be\0\u05ef\0\u0620"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\61\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\61\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u03d4\0\u03d4\0\u0405\0\61\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\61\0\u0bad\0\u04fa\0\u0bde\0\u0c0f\0\61"+
    "\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\61\0\61\0\u144a\0\u147b\0\61\0\u14ac"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\61\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\61\0\u1944\0\u1975\0\61\0\61\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\61\0\61\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1d18\0\u1d49\0\61\0\61\0\61\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\61\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\61\0\u1fc6\0\u1ff7\0\61\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\61\0\u20ec\0\61\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\61\0\u2307\0\u2338\0\u2369\0\u239a\0\61\0\u23cb\0\u23fc"+
    "\0\61\0\u242d\0\61\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\61\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801"+
    "\0\61\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\61"+
    "\0\u2958\0\u2989\0\u29ba\0\u29eb\0\61\0\u2a1c\0\u2a4d\0\u2a7e"+
    "\0\u2aaf\0\61\0\61\0\61\0\61\0\u2ae0\0\61\0\u2b11"+
    "\0\61\0\61\0\u2b42\0\61\0\u2b73\0\u2ba4\0\61\0\u2bd5"+
    "\0\u2c06\0\61\0\u2c37\0\u2c68\0\61\0\u2c99\0\u2cca\0\u2cfb"+
    "\0\61\0\u2d2c\0\61\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21"+
    "\0\61\0\u2e52\0\u2e83\0\61\0\u2eb4\0\u2ee5\0\61\0\u2f16"+
    "\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\61\0\u300b\0\u303c\0\u306d"+
    "\0\u309e\0\u30cf\0\61\0\u3100\0\61\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\2\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\2"+
    "\1\25\1\26\1\27\1\2\1\30\1\31\2\2\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\2\1\45\1\46\1\47\1\50\1\2"+
    "\62\0\2\51\4\0\22\51\2\0\5\51\20\0\1\51"+
    "\2\0\1\4\61\0\1\5\1\0\1\5\57\0\1\52"+
    "\1\0\1\53\62\0\1\54\2\0\1\55\14\0\1\56"+
    "\42\0\1\57\14\0\1\60\43\0\1\61\6\0\1\62"+
    "\3\0\1\63\34\0\1\64\20\0\1\65\45\0\1\66"+
    "\6\0\1\67\6\0\1\70\1\0\1\71\41\0\1\72"+
    "\5\0\1\73\1\74\17\0\1\75\30\0\1\76\4\0"+
    "\1\77\1\100\64\0\1\101\64\0\1\102\50\0\1\103"+
    "\55\0\1\104\56\0\1\105\62\0\1\106\2\0\1\107"+
    "\52\0\1\110\2\0\1\111\2\0\1\112\7\0\1\113"+
    "\33\0\5\114\1\0\23\114\1\115\27\114\7\0\22\116"+
    "\1\0\1\117\5\116\20\0\1\116\15\0\1\120\55\0"+
    "\1\121\12\0\1\122\106\0\1\123\47\0\1\124\17\0"+
    "\1\125\1\51\4\0\22\51\2\0\5\51\20\0\1\51"+
    "\5\52\1\0\53\52\4\53\1\0\1\53\1\126\52\53"+
    "\7\0\1\127\4\0\1\130\6\0\1\131\72\0\1\132"+
    "\37\0\1\65\74\0\1\133\40\0\1\134\17\0\1\135"+
    "\55\0\1\136\55\0\1\137\3\0\1\140\51\0\1\141"+
    "\51\0\1\142\62\0\1\143\64\0\1\144\52\0\1\145"+
    "\64\0\1\146\63\0\1\147\42\0\1\150\74\0\1\151"+
    "\65\0\1\152\61\0\1\153\44\0\1\154\62\0\1\155"+
    "\5\0\1\156\55\0\1\157\20\0\1\160\35\0\1\161"+
    "\74\0\1\65\56\0\1\162\2\0\1\163\32\0\1\164"+
    "\74\0\1\165\71\0\1\166\42\0\1\167\3\0\1\170"+
    "\53\0\1\171\50\0\1\167\22\0\1\172\52\0\1\173"+
    "\66\0\1\174\40\0\1\175\56\0\4\53\1\2\1\53"+
    "\1\126\52\53\11\0\1\176\71\0\1\177\60\0\1\200"+
    "\53\0\1\201\44\0\1\202\71\0\1\203\70\0\1\204"+
    "\63\0\1\205\50\0\1\206\52\0\1\207\52\0\1\210"+
    "\73\0\1\211\10\0\1\212\52\0\1\213\52\0\1\214"+
    "\61\0\1\215\63\0\1\216\52\0\1\217\16\0\1\220"+
    "\43\0\1\221\56\0\1\222\100\0\1\223\47\0\1\224"+
    "\57\0\1\225\57\0\1\226\56\0\1\227\63\0\1\230"+
    "\61\0\1\231\60\0\1\232\66\0\1\233\52\0\1\234"+
    "\52\0\1\235\77\0\1\236\43\0\1\237\60\0\1\240"+
    "\56\0\1\241\76\0\1\242\47\0\1\243\70\0\1\244"+
    "\35\0\1\175\41\0\1\245\23\0\1\246\66\0\1\247"+
    "\52\0\1\250\73\0\1\251\45\0\1\252\24\0\1\253"+
    "\1\254\34\0\1\255\57\0\1\256\63\0\1\257\3\0"+
    "\1\260\10\0\1\261\4\0\1\262\50\0\1\263\47\0"+
    "\1\264\56\0\1\265\55\0\1\266\61\0\1\267\73\0"+
    "\1\270\44\0\1\271\100\0\1\272\41\0\1\273\60\0"+
    "\1\274\65\0\1\275\65\0\1\276\63\0\1\277\55\0"+
    "\1\300\52\0\1\301\61\0\1\302\60\0\1\303\61\0"+
    "\1\304\54\0\1\305\62\0\1\306\62\0\1\307\64\0"+
    "\1\310\64\0\1\311\57\0\1\312\43\0\1\313\62\0"+
    "\1\314\65\0\1\315\71\0\1\316\42\0\1\317\56\0"+
    "\1\320\75\0\1\321\60\0\1\322\47\0\1\323\71\0"+
    "\1\324\62\0\1\325\40\0\1\326\5\0\1\327\52\0"+
    "\1\330\5\0\1\331\70\0\1\332\43\0\1\333\62\0"+
    "\1\334\57\0\1\335\76\0\1\336\44\0\1\337\61\0"+
    "\1\340\67\0\1\341\36\0\1\342\67\0\1\343\57\0"+
    "\1\344\76\0\1\345\50\0\1\346\44\0\1\347\101\0"+
    "\1\350\50\0\1\351\47\0\1\352\71\0\1\353\74\0"+
    "\1\354\43\0\1\355\74\0\1\356\42\0\1\357\62\0"+
    "\1\360\65\0\1\361\64\0\1\362\53\0\1\363\53\0"+
    "\1\364\73\0\1\365\52\0\1\366\57\0\1\367\66\0"+
    "\1\370\52\0\1\371\54\0\1\372\65\0\1\373\70\0"+
    "\1\374\50\0\1\375\70\0\1\376\71\0\1\377\47\0"+
    "\1\u0100\55\0\1\u0101\46\0\1\u0102\61\0\1\u0103\74\0"+
    "\1\u0104\45\0\1\u0105\63\0\1\u0106\52\0\1\u0107\73\0"+
    "\1\u0108\60\0\1\u0109\60\0\1\u010a\50\0\1\u010b\73\0"+
    "\1\u010c\55\0\1\u010d\47\0\1\u010e\76\0\1\u010f\41\0"+
    "\1\u0110\62\0\1\u0111\73\0\1\u0112\50\0\1\u0113\62\0"+
    "\1\u0114\57\0\1\u0115\64\0\1\u0116\60\0\1\u0117\65\0"+
    "\1\u0118\53\0\1\u0119\50\0\1\u011a\60\0\1\u011b\65\0"+
    "\1\u011c\42\0\1\u011d\101\0\1\u011e\63\0\1\u011f\34\0"+
    "\1\u0120\74\0\1\u0121\65\0\1\u0122\66\0\1\u0123\37\0"+
    "\1\u0124\61\0\1\u0125\64\0\1\u0126\72\0\1\u0127\47\0"+
    "\1\u0128\60\0\1\u0129\53\0\1\u012a\57\0\1\217\63\0"+
    "\1\u012b\56\0\1\u012c\100\0\1\u012d\45\0\1\u012e\55\0"+
    "\1\u012f\70\0\1\u0130\50\0\1\u0131\56\0\1\u0132\64\0"+
    "\1\u0133\62\0\1\u0134\57\0\1\u0135\57\0\1\u0136\54\0"+
    "\1\u0137\75\0\1\u0138\47\0\1\u0139\66\0\1\u013a\46\0"+
    "\1\u013b\72\0\1\u013c\55\0\1\u013d\56\0\1\u0115\70\0"+
    "\1\u013e\47\0\1\u013f\56\0\1\u0140\70\0\1\u0141\63\0"+
    "\1\u0142\52\0\1\u0143\50\0\1\u0144\67\0\1\u0145\54\0"+
    "\1\u0146\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12593];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\22\1\2\11\2\1\13\11"+
    "\1\0\1\1\2\0\1\11\7\0\1\11\10\0\1\11"+
    "\16\0\1\1\1\0\1\11\3\0\1\11\1\0\1\1"+
    "\2\0\1\11\11\0\1\1\40\0\2\11\2\0\1\11"+
    "\6\0\1\11\22\0\1\11\2\0\2\11\16\0\2\11"+
    "\6\0\3\11\1\1\3\0\1\11\4\0\1\1\3\0"+
    "\1\11\2\0\1\11\4\0\1\11\1\0\1\11\12\0"+
    "\1\11\4\0\1\11\2\0\1\11\1\0\1\11\16\0"+
    "\1\11\6\0\1\11\1\1\5\0\1\11\1\1\3\0"+
    "\1\11\4\0\4\11\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\1\11\5\0\1\11\2\0\1\11\2\0"+
    "\1\11\5\0\1\11\5\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { return new Symbol(sym.Repetir, yychar, yyline, yytext());
          }
        case 78: break;
        case 58: 
          { return new Symbol(sym.Car, yychar, yyline, yytext());
          }
        case 79: break;
        case 77: 
          { return new Symbol(sym.DeloContrario, yychar, yyline, yytext());
          }
        case 80: break;
        case 36: 
          { return new Symbol(sym.Para, yychar, yyline, yytext());
          }
        case 81: break;
        case 44: 
          { return new Symbol(sym.OperadorRelacional, yychar, yyline, yytext());
          }
        case 82: break;
        case 2: 
          { return new Symbol(sym.GuionLow, yychar, yyline, yytext());
          }
        case 83: break;
        case 19: 
          { return new Symbol(sym.DosPuntos, yychar, yyline, yytext());
          }
        case 84: break;
        case 16: 
          { return new Symbol(sym.CorcheteA, yychar, yyline, yytext());
          }
        case 85: break;
        case 11: 
          { return new Symbol(sym.ParentesisC, yychar, yyline, yytext());
          }
        case 86: break;
        case 61: 
          { return new Symbol(sym.Entonces, yychar, yyline, yytext());
          }
        case 87: break;
        case 24: 
          { return new Symbol(sym.Si, yychar, yyline, yytext());
          }
        case 88: break;
        case 76: 
          { return new Symbol(sym.ConIncremental, yychar, yyline, yytext());
          }
        case 89: break;
        case 37: 
          { return new Symbol(sym.Float, yychar, yyline, yytext());
          }
        case 90: break;
        case 47: 
          { return new Symbol(sym.TipoCadena, yychar, yyline, yytext());
          }
        case 91: break;
        case 71: 
          { return new Symbol(sym.FinMetodo, yychar, yyline, yytext());
          }
        case 92: break;
        case 15: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 93: break;
        case 26: 
          { return new Symbol(sym.Caracter, yychar, yyline, yytext());
          }
        case 94: break;
        case 35: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 95: break;
        case 1: 
          { /*Ignore*/
          }
        case 96: break;
        case 64: 
          { return new Symbol(sym.Booleano, yychar, yyline, yytext());
          }
        case 97: break;
        case 25: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 98: break;
        case 13: 
          { return new Symbol(sym.LlaveC, yychar, yyline, yytext());
          }
        case 99: break;
        case 53: 
          { return new Symbol(sym.Funcion, yychar, yyline, yytext());
          }
        case 100: break;
        case 68: 
          { return new Symbol(sym.FinSegun, yychar, yyline, yytext());
          }
        case 101: break;
        case 5: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 102: break;
        case 21: 
          { return new Symbol(sym.InterrogacionC, yychar, yyline, yytext());
          }
        case 103: break;
        case 38: 
          { return new Symbol(sym.Falso, yychar, yyline, yytext());
          }
        case 104: break;
        case 55: 
          { return new Symbol(sym.Boolean, yychar, yyline, yytext());
          }
        case 105: break;
        case 75: 
          { return new Symbol(sym.ConParametros, yychar, yyline, yytext());
          }
        case 106: break;
        case 59: 
          { return new Symbol(sym.FinPara, yychar, yyline, yytext());
          }
        case 107: break;
        case 51: 
          { return new Symbol(sym.Modulo, yychar, yyline, yytext());
          }
        case 108: break;
        case 65: 
          { return new Symbol(sym.Mientras, yychar, yyline, yytext());
          }
        case 109: break;
        case 14: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 110: break;
        case 74: 
          { return new Symbol(sym.FinMientras, yychar, yyline, yytext());
          }
        case 111: break;
        case 7: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 112: break;
        case 48: 
          { return new Symbol(sym.FinSi, yychar, yyline, yytext());
          }
        case 113: break;
        case 52: 
          { return new Symbol(sym.Metodo, yychar, yyline, yytext());
          }
        case 114: break;
        case 28: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 115: break;
        case 34: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 116: break;
        case 29: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 117: break;
        case 33: 
          { return new Symbol(sym.Osi, yychar, yyline, yytext());
          }
        case 118: break;
        case 43: 
          { return new Symbol(sym.Doble, yychar, yyline, yytext());
          }
        case 119: break;
        case 66: 
          { return new Symbol(sym.Potencia, yychar, yyline, yytext());
          }
        case 120: break;
        case 8: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 121: break;
        case 17: 
          { return new Symbol(sym.CorcheteC, yychar, yyline, yytext());
          }
        case 122: break;
        case 45: 
          { return new Symbol(sym.inicioAnalisis, yychar, yyline, yytext());
          }
        case 123: break;
        case 63: 
          { return new Symbol(sym.Retornar, yychar, yyline, yytext());
          }
        case 124: break;
        case 10: 
          { return new Symbol(sym.ParentesisA, yychar, yyline, yytext());
          }
        case 125: break;
        case 22: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 126: break;
        case 23: 
          { return new Symbol(sym.OperadorLogico, yychar, yyline, yytext());
          }
        case 127: break;
        case 70: 
          { return new Symbol(sym.Verdadero, yychar, yyline, yytext());
          }
        case 128: break;
        case 42: 
          { return new Symbol(sym.Hasta, yychar, yyline, yytext());
          }
        case 129: break;
        case 62: 
          { return new Symbol(sym.Ejecutar, yychar, yyline, yytext());
          }
        case 130: break;
        case 50: 
          { return new Symbol(sym.Double, yychar, yyline, yytext());
          }
        case 131: break;
        case 30: 
          { return new Symbol(sym.finAnalisis, yychar, yyline, yytext());
          }
        case 132: break;
        case 4: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 133: break;
        case 9: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 134: break;
        case 73: 
          { return new Symbol(sym.FinFuncion, yychar, yyline, yytext());
          }
        case 135: break;
        case 12: 
          { return new Symbol(sym.LlaveA, yychar, yyline, yytext());
          }
        case 136: break;
        case 27: 
          { return new Symbol(sym.Asignar, yychar, yyline, yytext());
          }
        case 137: break;
        case 49: 
          { return new Symbol(sym.String, yychar, yyline, yytext());
          }
        case 138: break;
        case 6: 
          { return new Symbol(sym.Comilla, yychar, yyline, yytext());
          }
        case 139: break;
        case 20: 
          { return new Symbol(sym.InterrogacionA, yychar, yyline, yytext());
          }
        case 140: break;
        case 40: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 141: break;
        case 41: 
          { return new Symbol(sym.Hacer, yychar, yyline, yytext());
          }
        case 142: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 143: break;
        case 56: 
          { return new Symbol(sym.Ingresar, yychar, yyline, yytext());
          }
        case 144: break;
        case 32: 
          { return new Symbol(sym.Char, yychar, yyline, yytext());
          }
        case 145: break;
        case 46: 
          { return new Symbol(sym.Numeroo, yychar, yyline, yytext());
          }
        case 146: break;
        case 18: 
          { return new Symbol(sym.Mod, yychar, yyline, yytext());
          }
        case 147: break;
        case 60: 
          { return new Symbol(sym.Flotante, yychar, yyline, yytext());
          }
        case 148: break;
        case 67: 
          { return new Symbol(sym.ConValor, yychar, yyline, yytext());
          }
        case 149: break;
        case 69: 
          { return new Symbol(sym.HastaQue, yychar, yyline, yytext());
          }
        case 150: break;
        case 57: 
          { return new Symbol(sym.Imprimir, yychar, yyline, yytext());
          }
        case 151: break;
        case 72: 
          { return new Symbol(sym.ImprimirSalto, yychar, yyline, yytext());
          }
        case 152: break;
        case 31: 
          { return new Symbol(sym.Como, yychar, yyline, yytext());
          }
        case 153: break;
        case 39: 
          { return new Symbol(sym.Segun, yychar, yyline, yytext());
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
