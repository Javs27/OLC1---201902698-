
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\004\000\002\006" +
    "\007\000\002\006\011\000\002\006\015\000\002\006\021" +
    "\000\002\006\004\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\003\000\002\010\016\000\002\010\023\000\002\010" +
    "\030\000\002\010\035\000\002\010\042\000\002\010\016" +
    "\000\002\010\023\000\002\010\030\000\002\010\035\000" +
    "\002\010\042\000\002\010\004\000\002\011\013\000\002" +
    "\011\012\000\002\011\013\000\002\011\015\000\002\011" +
    "\004\000\002\012\007\000\002\012\006\000\002\012\004" +
    "\000\002\013\006\000\002\013\005\000\002\013\004\000" +
    "\002\014\006\000\002\014\012\000\002\014\004\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\013\000\002\016\013\000\002\016\013" +
    "\000\002\016\013\000\002\016\004\000\002\015\004\000" +
    "\002\015\006\000\002\015\004\000\002\015\006\000\002" +
    "\015\004\000\002\015\006\000\002\015\004\000\002\015" +
    "\006\000\002\017\007\000\002\017\007\000\002\017\010" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\007\000\002\020\007\000\002" +
    "\020\010\000\002\021\005\000\002\021\007\000\002\021" +
    "\005\000\002\022\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\004\037\004\001\002\000\042\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\051\037" +
    "\054\020\057\016\061\033\064\031\065\042\070\036\071" +
    "\015\074\043\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\012\015\310\016\305\031\311\032" +
    "\314\001\002\000\102\003\uff96\011\uff96\012\uff96\013\uff96" +
    "\017\uff96\021\uff96\022\uff96\031\uff96\032\uff96\034\uff96\035" +
    "\uff96\040\uff96\041\uff96\044\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\053\uff96\054\uff96\055\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\064\uff96\065\uff96\066\uff96\070\uff96\071\uff96" +
    "\074\uff96\117\u014d\001\002\000\070\003\ufff3\017\ufff3\022" +
    "\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\040\ufff3\041\ufff3" +
    "\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\070\ufff3\071\ufff3\074\ufff3\001\002\000" +
    "\100\003\uffe7\011\122\012\121\013\123\017\uffe7\021\120" +
    "\022\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\040\uffe7\041" +
    "\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\070\uffe7\071\uffe7\074\uffe7\001\002" +
    "\000\044\003\035\022\023\031\021\032\010\034\024\040" +
    "\u014c\041\027\044\007\051\037\054\020\057\016\061\033" +
    "\064\031\065\042\070\036\071\015\074\043\001\002\000" +
    "\070\003\uffff\017\uffff\022\uffff\031\uffff\032\uffff\034\uffff" +
    "\035\uffff\040\uffff\041\uffff\044\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\053\uffff\054\uffff\055\uffff\057\uffff\060\uffff" +
    "\061\uffff\062\uffff\064\uffff\065\uffff\066\uffff\070\uffff\071" +
    "\uffff\074\uffff\001\002\000\006\031\u0144\103\u0145\001\002" +
    "\000\012\015\310\016\305\031\311\032\314\001\002\000" +
    "\070\003\ufff5\017\ufff5\022\ufff5\031\ufff5\032\ufff5\034\ufff5" +
    "\035\ufff5\040\ufff5\041\ufff5\044\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\070\ufff5\071" +
    "\ufff5\074\ufff5\001\002\000\004\031\u012b\001\002\000\004" +
    "\117\u011e\001\002\000\070\003\uffed\017\uffed\022\uffed\031" +
    "\uffed\032\uffed\034\uffed\035\uffed\040\uffed\041\uffed\044\uffed" +
    "\046\uffed\047\uffed\050\uffed\051\uffed\053\uffed\054\uffed\055" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\064\uffed\065\uffed" +
    "\066\uffed\070\uffed\071\uffed\074\uffed\001\002\000\010\003" +
    "\276\022\023\032\274\001\002\000\004\031\367\001\002" +
    "\000\070\003\ufff1\017\ufff1\022\ufff1\031\ufff1\032\ufff1\034" +
    "\ufff1\035\ufff1\040\ufff1\041\ufff1\044\ufff1\046\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\053\ufff1\054\ufff1\055\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\064\ufff1\065\ufff1\066\ufff1\070\ufff1" +
    "\071\ufff1\074\ufff1\001\002\000\070\003\ufffd\017\ufffd\022" +
    "\ufffd\031\ufffd\032\ufffd\034\ufffd\035\ufffd\040\ufffd\041\ufffd" +
    "\044\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\070\ufffd\071\ufffd\074\ufffd\001\002\000" +
    "\004\031\343\001\002\000\070\003\ufffb\017\ufffb\022\ufffb" +
    "\031\ufffb\032\ufffb\034\ufffb\035\ufffb\040\ufffb\041\ufffb\044" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\070\ufffb\071\ufffb\074\ufffb\001\002\000\014" +
    "\015\310\016\305\022\334\031\335\032\314\001\002\000" +
    "\070\003\ufff7\017\ufff7\022\ufff7\031\ufff7\032\ufff7\034\ufff7" +
    "\035\ufff7\040\ufff7\041\ufff7\044\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\070\ufff7\071" +
    "\ufff7\074\ufff7\001\002\000\044\003\035\022\023\031\021" +
    "\032\010\034\024\041\027\044\007\051\037\054\020\057" +
    "\016\061\033\062\327\064\031\065\042\070\036\071\015" +
    "\074\043\001\002\000\070\003\ufff9\017\ufff9\022\ufff9\031" +
    "\ufff9\032\ufff9\034\ufff9\035\ufff9\040\ufff9\041\ufff9\044\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\070\ufff9\071\ufff9\074\ufff9\001\002\000\032\015" +
    "\310\016\305\023\302\027\312\031\311\032\314\035\307" +
    "\046\317\053\306\055\315\060\313\066\304\001\002\000" +
    "\004\031\267\001\002\000\006\031\132\032\131\001\002" +
    "\000\070\003\uffe9\017\uffe9\022\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\040\uffe9\041\uffe9\044\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\053\uffe9\054\uffe9\055\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\070\uffe9" +
    "\071\uffe9\074\uffe9\001\002\000\070\003\uffeb\017\uffeb\022" +
    "\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\040\uffeb\041\uffeb" +
    "\044\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\070\uffeb\071\uffeb\074\uffeb\001\002\000" +
    "\004\031\060\001\002\000\010\022\045\031\046\103\047" +
    "\001\002\000\070\003\uffef\017\uffef\022\uffef\031\uffef\032" +
    "\uffef\034\uffef\035\uffef\040\uffef\041\uffef\044\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\053\uffef\054\uffef\055\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066\uffef" +
    "\070\uffef\071\uffef\074\uffef\001\002\000\006\031\052\103" +
    "\053\001\002\000\004\027\051\001\002\000\004\027\050" +
    "\001\002\000\070\003\uff9e\017\uff9e\022\uff9e\031\uff9e\032" +
    "\uff9e\034\uff9e\035\uff9e\040\uff9e\041\uff9e\044\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\055\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\070\uff9e\071\uff9e\074\uff9e\001\002\000\070\003\uff9d\017" +
    "\uff9d\022\uff9d\031\uff9d\032\uff9d\034\uff9d\035\uff9d\040\uff9d" +
    "\041\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\064\uff9d\065\uff9d\066\uff9d\070\uff9d\071\uff9d\074\uff9d\001" +
    "\002\000\004\023\056\001\002\000\004\023\054\001\002" +
    "\000\004\027\055\001\002\000\070\003\uff9b\017\uff9b\022" +
    "\uff9b\031\uff9b\032\uff9b\034\uff9b\035\uff9b\040\uff9b\041\uff9b" +
    "\044\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\070\uff9b\071\uff9b\074\uff9b\001\002\000" +
    "\004\027\057\001\002\000\070\003\uff9c\017\uff9c\022\uff9c" +
    "\031\uff9c\032\uff9c\034\uff9c\035\uff9c\040\uff9c\041\uff9c\044" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\070\uff9c\071\uff9c\074\uff9c\001\002\000\044" +
    "\003\035\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\067\062\070\036\071\015\074\043\001\002\000\044\003" +
    "\035\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\051\037\054\020\057\016\061\033\064\031\065\042\066" +
    "\130\070\036\071\015\074\043\001\002\000\004\022\063" +
    "\001\002\000\004\031\065\001\002\000\006\023\072\030" +
    "\073\001\002\000\012\033\066\076\070\104\067\106\071" +
    "\001\002\000\006\023\uffab\030\uffab\001\002\000\006\023" +
    "\uffa5\030\uffa5\001\002\000\006\023\uffa7\030\uffa7\001\002" +
    "\000\006\023\uffa9\030\uffa9\001\002\000\042\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\051\037" +
    "\054\020\057\016\061\033\064\031\065\042\070\036\071" +
    "\015\074\043\001\002\000\004\031\074\001\002\000\012" +
    "\033\075\076\077\104\076\106\100\001\002\000\006\023" +
    "\uffaa\030\uffaa\001\002\000\006\023\uffa4\030\uffa4\001\002" +
    "\000\006\023\uffa6\030\uffa6\001\002\000\006\023\uffa8\030" +
    "\uffa8\001\002\000\044\003\035\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\051\037\054\020\057\016\061" +
    "\033\064\031\065\042\066\116\070\036\071\015\074\043" +
    "\001\002\000\070\003\ufff2\017\ufff2\022\ufff2\031\ufff2\032" +
    "\ufff2\034\ufff2\035\ufff2\040\ufff2\041\ufff2\044\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\053\ufff2\054\ufff2\055\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\070\ufff2\071\ufff2\074\ufff2\001\002\000\100\003\uffe6\011" +
    "\122\012\121\013\123\017\uffe6\021\120\022\uffe6\031\uffe6" +
    "\032\uffe6\034\uffe6\035\uffe6\040\uffe6\041\uffe6\044\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\070\uffe6\071\uffe6\074\uffe6\001\002\000\070\003\ufffe" +
    "\017\ufffe\022\ufffe\031\ufffe\032\ufffe\034\ufffe\035\ufffe\040" +
    "\ufffe\041\ufffe\044\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\070\ufffe\071\ufffe\074\ufffe" +
    "\001\002\000\070\003\ufff4\017\ufff4\022\ufff4\031\ufff4\032" +
    "\ufff4\034\ufff4\035\ufff4\040\ufff4\041\ufff4\044\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4\055\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\070\ufff4\071\ufff4\074\ufff4\001\002\000\070\003\uffec\017" +
    "\uffec\022\uffec\031\uffec\032\uffec\034\uffec\035\uffec\040\uffec" +
    "\041\uffec\044\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053" +
    "\uffec\054\uffec\055\uffec\057\uffec\060\uffec\061\uffec\062\uffec" +
    "\064\uffec\065\uffec\066\uffec\070\uffec\071\uffec\074\uffec\001" +
    "\002\000\070\003\ufff0\017\ufff0\022\ufff0\031\ufff0\032\ufff0" +
    "\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\053\ufff0\054\ufff0\055\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\064\ufff0\065\ufff0\066\ufff0\070" +
    "\ufff0\071\ufff0\074\ufff0\001\002\000\070\003\ufffc\017\ufffc" +
    "\022\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\040\ufffc\041" +
    "\ufffc\044\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc" +
    "\054\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\070\ufffc\071\ufffc\074\ufffc\001\002" +
    "\000\070\003\ufffa\017\ufffa\022\ufffa\031\ufffa\032\ufffa\034" +
    "\ufffa\035\ufffa\040\ufffa\041\ufffa\044\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa\070\ufffa" +
    "\071\ufffa\074\ufffa\001\002\000\070\003\ufff6\017\ufff6\022" +
    "\ufff6\031\ufff6\032\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\070\ufff6\071\ufff6\074\ufff6\001\002\000" +
    "\070\003\ufff8\017\ufff8\022\ufff8\031\ufff8\032\ufff8\034\ufff8" +
    "\035\ufff8\040\ufff8\041\ufff8\044\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\064\ufff8\065\ufff8\066\ufff8\070\ufff8\071" +
    "\ufff8\074\ufff8\001\002\000\070\003\uffe8\017\uffe8\022\uffe8" +
    "\031\uffe8\032\uffe8\034\uffe8\035\uffe8\040\uffe8\041\uffe8\044" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\070\uffe8\071\uffe8\074\uffe8\001\002\000\070" +
    "\003\uffea\017\uffea\022\uffea\031\uffea\032\uffea\034\uffea\035" +
    "\uffea\040\uffea\041\uffea\044\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\053\uffea\054\uffea\055\uffea\057\uffea\060\uffea\061" +
    "\uffea\062\uffea\064\uffea\065\uffea\066\uffea\070\uffea\071\uffea" +
    "\074\uffea\001\002\000\070\003\uffb6\017\uffb6\022\uffb6\031" +
    "\uffb6\032\uffb6\034\uffb6\035\uffb6\040\uffb6\041\uffb6\044\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\070\uffb6\071\uffb6\074\uffb6\001\002\000\070\003" +
    "\uffee\017\uffee\022\uffee\031\uffee\032\uffee\034\uffee\035\uffee" +
    "\040\uffee\041\uffee\044\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\053\uffee\054\uffee\055\uffee\057\uffee\060\uffee\061\uffee" +
    "\062\uffee\064\uffee\065\uffee\066\uffee\070\uffee\071\uffee\074" +
    "\uffee\001\002\000\004\032\127\001\002\000\004\032\126" +
    "\001\002\000\004\032\125\001\002\000\004\032\124\001" +
    "\002\000\102\003\uff93\011\uff93\012\uff93\013\uff93\017\uff93" +
    "\021\uff93\022\uff93\023\uff93\031\uff93\032\uff93\034\uff93\035" +
    "\uff93\040\uff93\041\uff93\044\uff93\046\uff93\047\uff93\050\uff93" +
    "\051\uff93\053\uff93\054\uff93\055\uff93\057\uff93\060\uff93\061" +
    "\uff93\062\uff93\064\uff93\065\uff93\066\uff93\070\uff93\071\uff93" +
    "\074\uff93\001\002\000\102\003\uff95\011\uff95\012\uff95\013" +
    "\uff95\017\uff95\021\uff95\022\uff95\023\uff95\031\uff95\032\uff95" +
    "\034\uff95\035\uff95\040\uff95\041\uff95\044\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\053\uff95\054\uff95\055\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95\070" +
    "\uff95\071\uff95\074\uff95\001\002\000\102\003\uff94\011\uff94" +
    "\012\uff94\013\uff94\017\uff94\021\uff94\022\uff94\023\uff94\031" +
    "\uff94\032\uff94\034\uff94\035\uff94\040\uff94\041\uff94\044\uff94" +
    "\046\uff94\047\uff94\050\uff94\051\uff94\053\uff94\054\uff94\055" +
    "\uff94\057\uff94\060\uff94\061\uff94\062\uff94\064\uff94\065\uff94" +
    "\066\uff94\070\uff94\071\uff94\074\uff94\001\002\000\102\003" +
    "\uff92\011\uff92\012\uff92\013\uff92\017\uff92\021\uff92\022\uff92" +
    "\023\uff92\031\uff92\032\uff92\034\uff92\035\uff92\040\uff92\041" +
    "\uff92\044\uff92\046\uff92\047\uff92\050\uff92\051\uff92\053\uff92" +
    "\054\uff92\055\uff92\057\uff92\060\uff92\061\uff92\062\uff92\064" +
    "\uff92\065\uff92\066\uff92\070\uff92\071\uff92\074\uff92\001\002" +
    "\000\070\003\uffb7\017\uffb7\022\uffb7\031\uffb7\032\uffb7\034" +
    "\uffb7\035\uffb7\040\uffb7\041\uffb7\044\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7" +
    "\071\uffb7\074\uffb7\001\002\000\004\052\211\001\002\000" +
    "\004\052\133\001\002\000\004\017\134\001\002\000\004" +
    "\031\135\001\002\000\004\020\136\001\002\000\004\045" +
    "\137\001\002\000\042\003\035\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\051\037\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\046\003\035\017\142\022\023\031\021\032\010\034" +
    "\024\041\027\044\007\047\141\051\037\054\020\057\016" +
    "\061\033\064\031\065\042\070\036\071\015\074\043\001" +
    "\002\000\004\045\206\001\002\000\004\031\143\001\002" +
    "\000\004\020\144\001\002\000\004\045\145\001\002\000" +
    "\042\003\035\022\023\031\021\032\010\034\024\041\027" +
    "\044\007\051\037\054\020\057\016\061\033\064\031\065" +
    "\042\070\036\071\015\074\043\001\002\000\046\003\035" +
    "\017\150\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\047\147\051\037\054\020\057\016\061\033\064\031" +
    "\065\042\070\036\071\015\074\043\001\002\000\004\045" +
    "\203\001\002\000\004\031\151\001\002\000\004\020\152" +
    "\001\002\000\004\045\153\001\002\000\042\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\051\037" +
    "\054\020\057\016\061\033\064\031\065\042\070\036\071" +
    "\015\074\043\001\002\000\046\003\035\017\156\022\023" +
    "\031\021\032\010\034\024\041\027\044\007\047\155\051" +
    "\037\054\020\057\016\061\033\064\031\065\042\070\036" +
    "\071\015\074\043\001\002\000\004\045\200\001\002\000" +
    "\004\031\157\001\002\000\004\020\160\001\002\000\004" +
    "\045\161\001\002\000\042\003\035\022\023\031\021\032" +
    "\010\034\024\041\027\044\007\051\037\054\020\057\016" +
    "\061\033\064\031\065\042\070\036\071\015\074\043\001" +
    "\002\000\046\003\035\017\164\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\047\163\051\037\054\020\057" +
    "\016\061\033\064\031\065\042\070\036\071\015\074\043" +
    "\001\002\000\004\045\175\001\002\000\004\031\165\001" +
    "\002\000\004\020\166\001\002\000\004\045\167\001\002" +
    "\000\042\003\035\022\023\031\021\032\010\034\024\041" +
    "\027\044\007\051\037\054\020\057\016\061\033\064\031" +
    "\065\042\070\036\071\015\074\043\001\002\000\044\003" +
    "\035\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\047\171\051\037\054\020\057\016\061\033\064\031\065" +
    "\042\070\036\071\015\074\043\001\002\000\004\045\172" +
    "\001\002\000\042\003\035\022\023\031\021\032\010\034" +
    "\024\041\027\044\007\051\037\054\020\057\016\061\033" +
    "\064\031\065\042\070\036\071\015\074\043\001\002\000" +
    "\044\003\035\022\023\031\021\032\010\034\024\041\027" +
    "\044\007\051\037\053\174\054\020\057\016\061\033\064" +
    "\031\065\042\070\036\071\015\074\043\001\002\000\070" +
    "\003\uffc4\017\uffc4\022\uffc4\031\uffc4\032\uffc4\034\uffc4\035" +
    "\uffc4\040\uffc4\041\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4\070\uffc4\071\uffc4" +
    "\074\uffc4\001\002\000\042\003\035\022\023\031\021\032" +
    "\010\034\024\041\027\044\007\051\037\054\020\057\016" +
    "\061\033\064\031\065\042\070\036\071\015\074\043\001" +
    "\002\000\044\003\035\022\023\031\021\032\010\034\024" +
    "\041\027\044\007\051\037\053\177\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\070\003\uffc5\017\uffc5\022\uffc5\031\uffc5\032\uffc5\034" +
    "\uffc5\035\uffc5\040\uffc5\041\uffc5\044\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\053\uffc5\054\uffc5\055\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5\066\uffc5\070\uffc5" +
    "\071\uffc5\074\uffc5\001\002\000\042\003\035\022\023\031" +
    "\021\032\010\034\024\041\027\044\007\051\037\054\020" +
    "\057\016\061\033\064\031\065\042\070\036\071\015\074" +
    "\043\001\002\000\044\003\035\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\051\037\053\202\054\020\057" +
    "\016\061\033\064\031\065\042\070\036\071\015\074\043" +
    "\001\002\000\070\003\uffc6\017\uffc6\022\uffc6\031\uffc6\032" +
    "\uffc6\034\uffc6\035\uffc6\040\uffc6\041\uffc6\044\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6\055\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\070\uffc6\071\uffc6\074\uffc6\001\002\000\042\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\051\037" +
    "\054\020\057\016\061\033\064\031\065\042\070\036\071" +
    "\015\074\043\001\002\000\044\003\035\022\023\031\021" +
    "\032\010\034\024\041\027\044\007\051\037\053\205\054" +
    "\020\057\016\061\033\064\031\065\042\070\036\071\015" +
    "\074\043\001\002\000\070\003\uffc7\017\uffc7\022\uffc7\031" +
    "\uffc7\032\uffc7\034\uffc7\035\uffc7\040\uffc7\041\uffc7\044\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\070\uffc7\071\uffc7\074\uffc7\001\002\000\042\003" +
    "\035\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\051\037\054\020\057\016\061\033\064\031\065\042\070" +
    "\036\071\015\074\043\001\002\000\044\003\035\022\023" +
    "\031\021\032\010\034\024\041\027\044\007\051\037\053" +
    "\210\054\020\057\016\061\033\064\031\065\042\070\036" +
    "\071\015\074\043\001\002\000\070\003\uffc8\017\uffc8\022" +
    "\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\040\uffc8\041\uffc8" +
    "\044\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\070\uffc8\071\uffc8\074\uffc8\001\002\000" +
    "\004\017\212\001\002\000\004\032\213\001\002\000\004" +
    "\020\214\001\002\000\004\045\215\001\002\000\042\003" +
    "\035\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\051\037\054\020\057\016\061\033\064\031\065\042\070" +
    "\036\071\015\074\043\001\002\000\046\003\035\017\220" +
    "\022\023\031\021\032\010\034\024\041\027\044\007\047" +
    "\217\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\070\036\071\015\074\043\001\002\000\004\045\264\001" +
    "\002\000\004\032\221\001\002\000\004\020\222\001\002" +
    "\000\004\045\223\001\002\000\042\003\035\022\023\031" +
    "\021\032\010\034\024\041\027\044\007\051\037\054\020" +
    "\057\016\061\033\064\031\065\042\070\036\071\015\074" +
    "\043\001\002\000\046\003\035\017\226\022\023\031\021" +
    "\032\010\034\024\041\027\044\007\047\225\051\037\054" +
    "\020\057\016\061\033\064\031\065\042\070\036\071\015" +
    "\074\043\001\002\000\004\045\261\001\002\000\004\032" +
    "\227\001\002\000\004\020\230\001\002\000\004\045\231" +
    "\001\002\000\042\003\035\022\023\031\021\032\010\034" +
    "\024\041\027\044\007\051\037\054\020\057\016\061\033" +
    "\064\031\065\042\070\036\071\015\074\043\001\002\000" +
    "\046\003\035\017\234\022\023\031\021\032\010\034\024" +
    "\041\027\044\007\047\233\051\037\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\004\045\256\001\002\000\004\032\235\001\002\000" +
    "\004\020\236\001\002\000\004\045\237\001\002\000\042" +
    "\003\035\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\070\036\071\015\074\043\001\002\000\046\003\035\017" +
    "\242\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\047\241\051\037\054\020\057\016\061\033\064\031\065" +
    "\042\070\036\071\015\074\043\001\002\000\004\045\253" +
    "\001\002\000\004\032\243\001\002\000\004\020\244\001" +
    "\002\000\004\045\245\001\002\000\042\003\035\022\023" +
    "\031\021\032\010\034\024\041\027\044\007\051\037\054" +
    "\020\057\016\061\033\064\031\065\042\070\036\071\015" +
    "\074\043\001\002\000\044\003\035\022\023\031\021\032" +
    "\010\034\024\041\027\044\007\047\247\051\037\054\020" +
    "\057\016\061\033\064\031\065\042\070\036\071\015\074" +
    "\043\001\002\000\004\045\250\001\002\000\042\003\035" +
    "\022\023\031\021\032\010\034\024\041\027\044\007\051" +
    "\037\054\020\057\016\061\033\064\031\065\042\070\036" +
    "\071\015\074\043\001\002\000\044\003\035\022\023\031" +
    "\021\032\010\034\024\041\027\044\007\051\037\053\252" +
    "\054\020\057\016\061\033\064\031\065\042\070\036\071" +
    "\015\074\043\001\002\000\070\003\uffc9\017\uffc9\022\uffc9" +
    "\031\uffc9\032\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9\044" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\070\uffc9\071\uffc9\074\uffc9\001\002\000\042" +
    "\003\035\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\070\036\071\015\074\043\001\002\000\044\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\051\037" +
    "\053\255\054\020\057\016\061\033\064\031\065\042\070" +
    "\036\071\015\074\043\001\002\000\070\003\uffca\017\uffca" +
    "\022\uffca\031\uffca\032\uffca\034\uffca\035\uffca\040\uffca\041" +
    "\uffca\044\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053\uffca" +
    "\054\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062\uffca\064" +
    "\uffca\065\uffca\066\uffca\070\uffca\071\uffca\074\uffca\001\002" +
    "\000\042\003\035\022\023\031\021\032\010\034\024\041" +
    "\027\044\007\051\037\054\020\057\016\061\033\064\031" +
    "\065\042\070\036\071\015\074\043\001\002\000\044\003" +
    "\035\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\051\037\053\260\054\020\057\016\061\033\064\031\065" +
    "\042\070\036\071\015\074\043\001\002\000\070\003\uffcb" +
    "\017\uffcb\022\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\040" +
    "\uffcb\041\uffcb\044\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\070\uffcb\071\uffcb\074\uffcb" +
    "\001\002\000\042\003\035\022\023\031\021\032\010\034" +
    "\024\041\027\044\007\051\037\054\020\057\016\061\033" +
    "\064\031\065\042\070\036\071\015\074\043\001\002\000" +
    "\044\003\035\022\023\031\021\032\010\034\024\041\027" +
    "\044\007\051\037\053\263\054\020\057\016\061\033\064" +
    "\031\065\042\070\036\071\015\074\043\001\002\000\070" +
    "\003\uffcc\017\uffcc\022\uffcc\031\uffcc\032\uffcc\034\uffcc\035" +
    "\uffcc\040\uffcc\041\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc" +
    "\074\uffcc\001\002\000\042\003\035\022\023\031\021\032" +
    "\010\034\024\041\027\044\007\051\037\054\020\057\016" +
    "\061\033\064\031\065\042\070\036\071\015\074\043\001" +
    "\002\000\044\003\035\022\023\031\021\032\010\034\024" +
    "\041\027\044\007\051\037\053\266\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\070\003\uffcd\017\uffcd\022\uffcd\031\uffcd\032\uffcd\034" +
    "\uffcd\035\uffcd\040\uffcd\041\uffcd\044\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd" +
    "\071\uffcd\074\uffcd\001\002\000\006\022\270\031\065\001" +
    "\002\000\012\003\276\022\023\023\275\032\274\001\002" +
    "\000\006\023\272\030\073\001\002\000\004\027\273\001" +
    "\002\000\070\003\uffa2\017\uffa2\022\uffa2\031\uffa2\032\uffa2" +
    "\034\uffa2\035\uffa2\040\uffa2\041\uffa2\044\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2\070" +
    "\uffa2\071\uffa2\074\uffa2\001\002\000\014\011\uff96\012\uff96" +
    "\013\uff96\021\uff96\023\uff96\001\002\000\004\027\303\001" +
    "\002\000\004\023\302\001\002\000\014\011\122\012\121" +
    "\013\123\021\120\023\300\001\002\000\004\027\301\001" +
    "\002\000\070\003\uffa1\017\uffa1\022\uffa1\031\uffa1\032\uffa1" +
    "\034\uffa1\035\uffa1\040\uffa1\041\uffa1\044\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1\070" +
    "\uffa1\071\uffa1\074\uffa1\001\002\000\102\003\uff90\011\uff90" +
    "\012\uff90\013\uff90\017\uff90\021\uff90\022\uff90\023\uff90\031" +
    "\uff90\032\uff90\034\uff90\035\uff90\040\uff90\041\uff90\044\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\053\uff90\054\uff90\055" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\064\uff90\065\uff90" +
    "\066\uff90\070\uff90\071\uff90\074\uff90\001\002\000\070\003" +
    "\uffa3\017\uffa3\022\uffa3\031\uffa3\032\uffa3\034\uffa3\035\uffa3" +
    "\040\uffa3\041\uffa3\044\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3" +
    "\062\uffa3\064\uffa3\065\uffa3\066\uffa3\070\uffa3\071\uffa3\074" +
    "\uffa3\001\002\000\070\003\uffb5\017\uffb5\022\uffb5\031\uffb5" +
    "\032\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\044\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\070\uffb5\071\uffb5\074\uffb5\001\002\000\076\003\uffce" +
    "\017\uffce\022\uffce\027\uffce\031\uffce\032\uffce\034\uffce\035" +
    "\uffce\040\uffce\041\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\064\uffce\065\uffce\066\uffce" +
    "\070\uffce\071\uffce\074\uffce\001\002\000\070\003\uffc3\017" +
    "\uffc3\022\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\040\uffc3" +
    "\041\uffc3\044\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\070\uffc3\071\uffc3\074\uffc3\001" +
    "\002\000\070\003\uffac\017\uffac\022\uffac\031\uffac\032\uffac" +
    "\034\uffac\035\uffac\040\uffac\041\uffac\044\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\053\uffac\054\uffac\055\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\070" +
    "\uffac\071\uffac\074\uffac\001\002\000\076\003\uffcf\017\uffcf" +
    "\022\uffcf\027\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\040" +
    "\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf\070\uffcf" +
    "\071\uffcf\074\uffcf\001\002\000\004\130\323\001\002\000" +
    "\070\003\uffd9\017\uffd9\022\uffd9\031\uffd9\032\uffd9\034\uffd9" +
    "\035\uffd9\040\uffd9\041\uffd9\044\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9\070\uffd9\071" +
    "\uffd9\074\uffd9\001\002\000\070\003\uffbb\017\uffbb\022\uffbb" +
    "\031\uffbb\032\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\044" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\070\uffbb\071\uffbb\074\uffbb\001\002\000\004" +
    "\130\320\001\002\000\070\003\uffbe\017\uffbe\022\uffbe\031" +
    "\uffbe\032\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe\044\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\070\uffbe\071\uffbe\074\uffbe\001\002\000\070\003" +
    "\uffb8\017\uffb8\022\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8" +
    "\040\uffb8\041\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\064\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\074" +
    "\uffb8\001\002\000\070\003\uffd4\017\uffd4\022\uffd4\031\uffd4" +
    "\032\uffd4\034\uffd4\035\uffd4\040\uffd4\041\uffd4\044\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\070\uffd4\071\uffd4\074\uffd4\001\002\000\006\031\322" +
    "\032\321\001\002\000\076\003\uffd0\017\uffd0\022\uffd0\027" +
    "\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\040\uffd0\041\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\064\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0\074" +
    "\uffd0\001\002\000\076\003\uffd1\017\uffd1\022\uffd1\027\uffd1" +
    "\031\uffd1\032\uffd1\034\uffd1\035\uffd1\040\uffd1\041\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1\071\uffd1\074\uffd1" +
    "\001\002\000\006\031\325\032\324\001\002\000\076\003" +
    "\uffd2\017\uffd2\022\uffd2\027\uffd2\031\uffd2\032\uffd2\034\uffd2" +
    "\035\uffd2\040\uffd2\041\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\070\uffd2\071\uffd2\074\uffd2\001\002\000\076\003\uffd3" +
    "\017\uffd3\022\uffd3\027\uffd3\031\uffd3\032\uffd3\034\uffd3\035" +
    "\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\070\uffd3\071\uffd3\074\uffd3\001\002\000\044\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\051\037" +
    "\054\020\057\016\061\033\062\331\064\031\065\042\070" +
    "\036\071\015\074\043\001\002\000\012\015\310\016\305" +
    "\031\311\032\314\001\002\000\070\003\uffb9\017\uffb9\022" +
    "\uffb9\031\uffb9\032\uffb9\034\uffb9\035\uffb9\040\uffb9\041\uffb9" +
    "\044\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\070\uffb9\071\uffb9\074\uffb9\001\002\000" +
    "\012\015\310\016\305\031\311\032\314\001\002\000\070" +
    "\003\uffba\017\uffba\022\uffba\031\uffba\032\uffba\034\uffba\035" +
    "\uffba\040\uffba\041\uffba\044\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\064\uffba\065\uffba\066\uffba\070\uffba\071\uffba" +
    "\074\uffba\001\002\000\004\027\342\001\002\000\010\003" +
    "\276\022\023\032\274\001\002\000\006\027\336\130\323" +
    "\001\002\000\070\003\uff99\017\uff99\022\uff99\031\uff99\032" +
    "\uff99\034\uff99\035\uff99\040\uff99\041\uff99\044\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\053\uff99\054\uff99\055\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99" +
    "\070\uff99\071\uff99\074\uff99\001\002\000\014\011\122\012" +
    "\121\013\123\021\120\023\340\001\002\000\004\027\341" +
    "\001\002\000\070\003\uff98\017\uff98\022\uff98\031\uff98\032" +
    "\uff98\034\uff98\035\uff98\040\uff98\041\uff98\044\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\053\uff98\054\uff98\055\uff98\057" +
    "\uff98\060\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98" +
    "\070\uff98\071\uff98\074\uff98\001\002\000\070\003\uff97\017" +
    "\uff97\022\uff97\031\uff97\032\uff97\034\uff97\035\uff97\040\uff97" +
    "\041\uff97\044\uff97\046\uff97\047\uff97\050\uff97\051\uff97\053" +
    "\uff97\054\uff97\055\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\064\uff97\065\uff97\066\uff97\070\uff97\071\uff97\074\uff97\001" +
    "\002\000\004\042\344\001\002\000\012\033\345\076\347" +
    "\104\346\106\350\001\002\000\004\043\364\001\002\000" +
    "\004\043\361\001\002\000\004\043\356\001\002\000\004" +
    "\043\351\001\002\000\006\015\352\016\353\001\002\000" +
    "\004\027\355\001\002\000\004\027\354\001\002\000\070" +
    "\003\uffe1\017\uffe1\022\uffe1\031\uffe1\032\uffe1\034\uffe1\035" +
    "\uffe1\040\uffe1\041\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\070\uffe1\071\uffe1" +
    "\074\uffe1\001\002\000\070\003\uffe2\017\uffe2\022\uffe2\031" +
    "\uffe2\032\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\044\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\070\uffe2\071\uffe2\074\uffe2\001\002\000\004\127" +
    "\357\001\002\000\004\027\360\001\002\000\070\003\uffe3" +
    "\017\uffe3\022\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\040" +
    "\uffe3\041\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3\071\uffe3\074\uffe3" +
    "\001\002\000\004\103\362\001\002\000\004\027\363\001" +
    "\002\000\070\003\uffe4\017\uffe4\022\uffe4\031\uffe4\032\uffe4" +
    "\034\uffe4\035\uffe4\040\uffe4\041\uffe4\044\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4\070" +
    "\uffe4\071\uffe4\074\uffe4\001\002\000\004\032\365\001\002" +
    "\000\004\027\366\001\002\000\070\003\uffe5\017\uffe5\022" +
    "\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\040\uffe5\041\uffe5" +
    "\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\070\uffe5\071\uffe5\074\uffe5\001\002\000" +
    "\012\033\370\076\372\104\371\106\373\001\002\000\044" +
    "\003\035\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\067\u0115\070\036\071\015\074\043\001\002\000\044\003" +
    "\035\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\051\037\054\020\057\016\061\033\064\031\065\042\067" +
    "\u010d\070\036\071\015\074\043\001\002\000\044\003\035" +
    "\022\023\031\021\032\010\034\024\041\027\044\007\051" +
    "\037\054\020\057\016\061\033\064\031\065\042\067\u0105" +
    "\070\036\071\015\074\043\001\002\000\044\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\051\037" +
    "\054\020\057\016\061\033\064\031\065\042\067\375\070" +
    "\036\071\015\074\043\001\002\000\044\003\035\022\023" +
    "\031\021\032\010\034\024\035\u0103\041\027\044\007\051" +
    "\037\054\020\057\016\061\033\064\031\065\042\070\036" +
    "\071\015\074\043\001\002\000\004\022\376\001\002\000" +
    "\004\031\065\001\002\000\006\023\u0100\030\073\001\002" +
    "\000\042\003\035\022\023\031\021\032\010\034\024\041" +
    "\027\044\007\051\037\054\020\057\016\061\033\064\031" +
    "\065\042\070\036\071\015\074\043\001\002\000\044\003" +
    "\035\022\023\031\021\032\010\034\024\035\u0102\041\027" +
    "\044\007\051\037\054\020\057\016\061\033\064\031\065" +
    "\042\070\036\071\015\074\043\001\002\000\070\003\uffaf" +
    "\017\uffaf\022\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf\040" +
    "\uffaf\041\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf\074\uffaf" +
    "\001\002\000\070\003\uffb2\017\uffb2\022\uffb2\031\uffb2\032" +
    "\uffb2\034\uffb2\035\uffb2\040\uffb2\041\uffb2\044\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\055\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\070\uffb2\071\uffb2\074\uffb2\001\002\000\044\003\035\022" +
    "\023\031\021\032\010\034\024\035\u010b\041\027\044\007" +
    "\051\037\054\020\057\016\061\033\064\031\065\042\070" +
    "\036\071\015\074\043\001\002\000\004\022\u0106\001\002" +
    "\000\004\031\065\001\002\000\006\023\u0108\030\073\001" +
    "\002\000\042\003\035\022\023\031\021\032\010\034\024" +
    "\041\027\044\007\051\037\054\020\057\016\061\033\064" +
    "\031\065\042\070\036\071\015\074\043\001\002\000\044" +
    "\003\035\022\023\031\021\032\010\034\024\035\u010a\041" +
    "\027\044\007\051\037\054\020\057\016\061\033\064\031" +
    "\065\042\070\036\071\015\074\043\001\002\000\070\003" +
    "\uffae\017\uffae\022\uffae\031\uffae\032\uffae\034\uffae\035\uffae" +
    "\040\uffae\041\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\053\uffae\054\uffae\055\uffae\057\uffae\060\uffae\061\uffae" +
    "\062\uffae\064\uffae\065\uffae\066\uffae\070\uffae\071\uffae\074" +
    "\uffae\001\002\000\070\003\uffb1\017\uffb1\022\uffb1\031\uffb1" +
    "\032\uffb1\034\uffb1\035\uffb1\040\uffb1\041\uffb1\044\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\070\uffb1\071\uffb1\074\uffb1\001\002\000\044\003\035" +
    "\022\023\031\021\032\010\034\024\035\u0113\041\027\044" +
    "\007\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\070\036\071\015\074\043\001\002\000\004\022\u010e\001" +
    "\002\000\004\031\065\001\002\000\006\023\u0110\030\073" +
    "\001\002\000\042\003\035\022\023\031\021\032\010\034" +
    "\024\041\027\044\007\051\037\054\020\057\016\061\033" +
    "\064\031\065\042\070\036\071\015\074\043\001\002\000" +
    "\044\003\035\022\023\031\021\032\010\034\024\035\u0112" +
    "\041\027\044\007\051\037\054\020\057\016\061\033\064" +
    "\031\065\042\070\036\071\015\074\043\001\002\000\070" +
    "\003\uffad\017\uffad\022\uffad\031\uffad\032\uffad\034\uffad\035" +
    "\uffad\040\uffad\041\uffad\044\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\064\uffad\065\uffad\066\uffad\070\uffad\071\uffad" +
    "\074\uffad\001\002\000\070\003\uffb3\017\uffb3\022\uffb3\031" +
    "\uffb3\032\uffb3\034\uffb3\035\uffb3\040\uffb3\041\uffb3\044\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\070\uffb3\071\uffb3\074\uffb3\001\002\000\044\003" +
    "\035\022\023\031\021\032\010\034\024\035\u011b\041\027" +
    "\044\007\051\037\054\020\057\016\061\033\064\031\065" +
    "\042\070\036\071\015\074\043\001\002\000\004\022\u0116" +
    "\001\002\000\004\031\065\001\002\000\006\023\u0118\030" +
    "\073\001\002\000\042\003\035\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\051\037\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\044\003\035\022\023\031\021\032\010\034\024\035" +
    "\u011a\041\027\044\007\051\037\054\020\057\016\061\033" +
    "\064\031\065\042\070\036\071\015\074\043\001\002\000" +
    "\070\003\uffb0\017\uffb0\022\uffb0\031\uffb0\032\uffb0\034\uffb0" +
    "\035\uffb0\040\uffb0\041\uffb0\044\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\064\uffb0\065\uffb0\066\uffb0\070\uffb0\071" +
    "\uffb0\074\uffb0\001\002\000\070\003\uffb4\017\uffb4\022\uffb4" +
    "\031\uffb4\032\uffb4\034\uffb4\035\uffb4\040\uffb4\041\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\070\uffb4\071\uffb4\074\uffb4\001\002\000\014" +
    "\011\122\012\121\013\123\021\120\023\u011d\001\002\000" +
    "\102\003\uff91\011\uff91\012\uff91\013\uff91\017\uff91\021\uff91" +
    "\022\uff91\023\uff91\031\uff91\032\uff91\034\uff91\035\uff91\040" +
    "\uff91\041\uff91\044\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\064\uff91\065\uff91\066\uff91\070\uff91\071\uff91\074\uff91" +
    "\001\002\000\016\015\u0120\016\u0121\031\u0123\032\u011f\103" +
    "\u0124\127\u0122\001\002\000\004\027\u012a\001\002\000\004" +
    "\027\u0129\001\002\000\004\027\u0128\001\002\000\004\027" +
    "\u0127\001\002\000\004\027\u0126\001\002\000\004\027\u0125" +
    "\001\002\000\070\003\uffdf\017\uffdf\022\uffdf\031\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\040\uffdf\041\uffdf\044\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\055\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\070\uffdf\071\uffdf\074\uffdf\001\002\000\070\003\uffdb\017" +
    "\uffdb\022\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\040\uffdb" +
    "\041\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\070\uffdb\071\uffdb\074\uffdb\001" +
    "\002\000\070\003\uffde\017\uffde\022\uffde\031\uffde\032\uffde" +
    "\034\uffde\035\uffde\040\uffde\041\uffde\044\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\053\uffde\054\uffde\055\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\064\uffde\065\uffde\066\uffde\070" +
    "\uffde\071\uffde\074\uffde\001\002\000\070\003\uffdc\017\uffdc" +
    "\022\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc\040\uffdc\041" +
    "\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc\074\uffdc\001\002" +
    "\000\070\003\uffdd\017\uffdd\022\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\040\uffdd\041\uffdd\044\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd" +
    "\071\uffdd\074\uffdd\001\002\000\070\003\uffe0\017\uffe0\022" +
    "\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\070\uffe0\071\uffe0\074\uffe0\001\002\000" +
    "\004\117\u012c\001\002\000\006\031\u012e\032\u012d\001\002" +
    "\000\004\063\u0135\001\002\000\004\063\u012f\001\002\000" +
    "\004\031\u0130\001\002\000\004\052\u0131\001\002\000\044" +
    "\003\035\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\051\037\054\020\055\u0132\057\016\061\033\064\031" +
    "\065\042\070\036\071\015\074\043\001\002\000\070\003" +
    "\uffc1\017\uffc1\022\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1" +
    "\040\uffc1\041\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\064\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\074" +
    "\uffc1\001\002\000\044\003\035\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\051\037\054\020\055\u0134\057" +
    "\016\061\033\064\031\065\042\070\036\071\015\074\043" +
    "\001\002\000\070\003\uffc2\017\uffc2\022\uffc2\031\uffc2\032" +
    "\uffc2\034\uffc2\035\uffc2\040\uffc2\041\uffc2\044\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\055\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\070\uffc2\071\uffc2\074\uffc2\001\002\000\004\032\u0136\001" +
    "\002\000\006\052\u0138\056\u0137\001\002\000\004\032\u013b" +
    "\001\002\000\042\003\035\022\023\031\021\032\010\034" +
    "\024\041\027\044\007\051\037\054\020\057\016\061\033" +
    "\064\031\065\042\070\036\071\015\074\043\001\002\000" +
    "\044\003\035\022\023\031\021\032\010\034\024\041\027" +
    "\044\007\051\037\054\020\055\u013a\057\016\061\033\064" +
    "\031\065\042\070\036\071\015\074\043\001\002\000\070" +
    "\003\uffc0\017\uffc0\022\uffc0\031\uffc0\032\uffc0\034\uffc0\035" +
    "\uffc0\040\uffc0\041\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\070\uffc0\071\uffc0" +
    "\074\uffc0\001\002\000\004\052\u013c\001\002\000\042\003" +
    "\035\022\023\031\021\032\010\034\024\041\027\044\007" +
    "\051\037\054\020\057\016\061\033\064\031\065\042\070" +
    "\036\071\015\074\043\001\002\000\044\003\035\022\023" +
    "\031\021\032\010\034\024\041\027\044\007\051\037\054" +
    "\020\055\u013e\057\016\061\033\064\031\065\042\070\036" +
    "\071\015\074\043\001\002\000\070\003\uffbf\017\uffbf\022" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf" +
    "\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\070\uffbf\071\uffbf\074\uffbf\001\002\000" +
    "\004\052\u0140\001\002\000\044\003\035\022\023\031\021" +
    "\032\010\034\024\041\027\044\007\051\037\054\020\057" +
    "\016\060\u0142\061\033\064\031\065\042\070\036\071\015" +
    "\074\043\001\002\000\044\003\035\022\023\031\021\032" +
    "\010\034\024\041\027\044\007\051\037\054\020\057\016" +
    "\060\u0143\061\033\064\031\065\042\070\036\071\015\074" +
    "\043\001\002\000\070\003\uffbc\017\uffbc\022\uffbc\031\uffbc" +
    "\032\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\044\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\070\uffbc\071\uffbc\074\uffbc\001\002\000\070\003\uffbd" +
    "\017\uffbd\022\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\040" +
    "\uffbd\041\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd\074\uffbd" +
    "\001\002\000\006\022\u0147\027\u0148\001\002\000\004\027" +
    "\u0146\001\002\000\070\003\uff9f\017\uff9f\022\uff9f\031\uff9f" +
    "\032\uff9f\034\uff9f\035\uff9f\040\uff9f\041\uff9f\044\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\070\uff9f\071\uff9f\074\uff9f\001\002\000\010\003\276" +
    "\022\023\032\274\001\002\000\070\003\uffa0\017\uffa0\022" +
    "\uffa0\031\uffa0\032\uffa0\034\uffa0\035\uffa0\040\uffa0\041\uffa0" +
    "\044\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\070\uffa0\071\uffa0\074\uffa0\001\002\000" +
    "\014\011\122\012\121\013\123\021\120\023\u014a\001\002" +
    "\000\004\027\u014b\001\002\000\070\003\uff9a\017\uff9a\022" +
    "\uff9a\031\uff9a\032\uff9a\034\uff9a\035\uff9a\040\uff9a\041\uff9a" +
    "\044\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\053\uff9a\054" +
    "\uff9a\055\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\070\uff9a\071\uff9a\074\uff9a\001\002\000" +
    "\004\002\000\001\002\000\004\032\u014e\001\002\000\004" +
    "\027\u014f\001\002\000\070\003\uffda\017\uffda\022\uffda\031" +
    "\uffda\032\uffda\034\uffda\035\uffda\040\uffda\041\uffda\044\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\053\uffda\054\uffda\055" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\064\uffda\065\uffda" +
    "\066\uffda\070\uffda\071\uffda\074\uffda\001\002\000\004\045" +
    "\u0151\001\002\000\042\003\035\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\051\037\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\050\003\035\022\023\031\021\032\010\034\024\041" +
    "\027\044\007\046\u0155\047\u0153\050\u0154\051\037\054\020" +
    "\057\016\061\033\064\031\065\042\070\036\071\015\074" +
    "\043\001\002\000\042\003\035\022\023\031\021\032\010" +
    "\034\024\041\027\044\007\051\037\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\012\015\310\016\305\031\311\032\314\001\002\000" +
    "\070\003\uffd8\017\uffd8\022\uffd8\031\uffd8\032\uffd8\034\uffd8" +
    "\035\uffd8\040\uffd8\041\uffd8\044\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\053\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\064\uffd8\065\uffd8\066\uffd8\070\uffd8\071" +
    "\uffd8\074\uffd8\001\002\000\004\045\u0157\001\002\000\042" +
    "\003\035\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\070\036\071\015\074\043\001\002\000\046\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\047\u0159" +
    "\050\u015a\051\037\054\020\057\016\061\033\064\031\065" +
    "\042\070\036\071\015\074\043\001\002\000\042\003\035" +
    "\022\023\031\021\032\010\034\024\041\027\044\007\051" +
    "\037\054\020\057\016\061\033\064\031\065\042\070\036" +
    "\071\015\074\043\001\002\000\012\015\310\016\305\031" +
    "\311\032\314\001\002\000\004\045\u015c\001\002\000\042" +
    "\003\035\022\023\031\021\032\010\034\024\041\027\044" +
    "\007\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\070\036\071\015\074\043\001\002\000\044\003\035\022" +
    "\023\031\021\032\010\034\024\041\027\044\007\047\u015e" +
    "\051\037\054\020\057\016\061\033\064\031\065\042\070" +
    "\036\071\015\074\043\001\002\000\042\003\035\022\023" +
    "\031\021\032\010\034\024\041\027\044\007\051\037\054" +
    "\020\057\016\061\033\064\031\065\042\070\036\071\015" +
    "\074\043\001\002\000\044\003\035\022\023\031\021\032" +
    "\010\034\024\041\027\044\007\046\u0160\051\037\054\020" +
    "\057\016\061\033\064\031\065\042\070\036\071\015\074" +
    "\043\001\002\000\070\003\uffd5\017\uffd5\022\uffd5\031\uffd5" +
    "\032\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5\044\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\070\uffd5\071\uffd5\074\uffd5\001\002\000\044\003\035" +
    "\022\023\031\021\032\010\034\024\041\027\044\007\046" +
    "\u0162\051\037\054\020\057\016\061\033\064\031\065\042" +
    "\070\036\071\015\074\043\001\002\000\070\003\uffd6\017" +
    "\uffd6\022\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\040\uffd6" +
    "\041\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\070\uffd6\071\uffd6\074\uffd6\001" +
    "\002\000\044\003\035\022\023\031\021\032\010\034\024" +
    "\041\027\044\007\046\u0164\051\037\054\020\057\016\061" +
    "\033\064\031\065\042\070\036\071\015\074\043\001\002" +
    "\000\070\003\uffd7\017\uffd7\022\uffd7\031\uffd7\032\uffd7\034" +
    "\uffd7\035\uffd7\040\uffd7\041\uffd7\044\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7\070\uffd7" +
    "\071\uffd7\074\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\004\002\004\001\001\000\036\003\012\004" +
    "\013\005\025\006\027\010\033\011\031\012\016\013\010" +
    "\014\024\016\043\017\021\020\040\021\037\022\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u014f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\103\005\107\006\110\010\112\011\111" +
    "\012\104\013\101\014\106\016\116\017\105\020\114\021" +
    "\113\022\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u013e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\332" +
    "\001\001\000\002\001\001\000\036\003\325\004\013\005" +
    "\025\006\027\010\033\011\031\012\016\013\010\014\024" +
    "\016\043\017\021\020\040\021\037\022\011\001\001\000" +
    "\002\001\001\000\004\007\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\060\004\013\005\025\006\027" +
    "\010\033\011\031\012\016\013\010\014\024\016\043\017" +
    "\021\020\040\021\037\022\011\001\001\000\034\004\103" +
    "\005\107\006\110\010\112\011\111\012\104\013\101\014" +
    "\106\016\116\017\105\020\114\021\113\022\102\001\001" +
    "\000\002\001\001\000\004\015\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\100\004" +
    "\013\005\025\006\027\010\033\011\031\012\016\013\010" +
    "\014\024\016\043\017\021\020\040\021\037\022\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\103\005\107\006\110\010\112\011\111\012\104" +
    "\013\101\014\106\016\116\017\105\020\114\021\113\022" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\137\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\145\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\153\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\161\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\167\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\036\003\172\004\013\005\025\006\027" +
    "\010\033\011\031\012\016\013\010\014\024\016\043\017" +
    "\021\020\040\021\037\022\011\001\001\000\034\004\103" +
    "\005\107\006\110\010\112\011\111\012\104\013\101\014" +
    "\106\016\116\017\105\020\114\021\113\022\102\001\001" +
    "\000\002\001\001\000\036\003\175\004\013\005\025\006" +
    "\027\010\033\011\031\012\016\013\010\014\024\016\043" +
    "\017\021\020\040\021\037\022\011\001\001\000\034\004" +
    "\103\005\107\006\110\010\112\011\111\012\104\013\101" +
    "\014\106\016\116\017\105\020\114\021\113\022\102\001" +
    "\001\000\002\001\001\000\036\003\200\004\013\005\025" +
    "\006\027\010\033\011\031\012\016\013\010\014\024\016" +
    "\043\017\021\020\040\021\037\022\011\001\001\000\034" +
    "\004\103\005\107\006\110\010\112\011\111\012\104\013" +
    "\101\014\106\016\116\017\105\020\114\021\113\022\102" +
    "\001\001\000\002\001\001\000\036\003\203\004\013\005" +
    "\025\006\027\010\033\011\031\012\016\013\010\014\024" +
    "\016\043\017\021\020\040\021\037\022\011\001\001\000" +
    "\034\004\103\005\107\006\110\010\112\011\111\012\104" +
    "\013\101\014\106\016\116\017\105\020\114\021\113\022" +
    "\102\001\001\000\002\001\001\000\036\003\206\004\013" +
    "\005\025\006\027\010\033\011\031\012\016\013\010\014" +
    "\024\016\043\017\021\020\040\021\037\022\011\001\001" +
    "\000\034\004\103\005\107\006\110\010\112\011\111\012" +
    "\104\013\101\014\106\016\116\017\105\020\114\021\113" +
    "\022\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\215\004\013\005\025\006\027\010\033\011\031\012" +
    "\016\013\010\014\024\016\043\017\021\020\040\021\037" +
    "\022\011\001\001\000\034\004\103\005\107\006\110\010" +
    "\112\011\111\012\104\013\101\014\106\016\116\017\105" +
    "\020\114\021\113\022\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\223\004\013\005\025\006\027\010\033\011\031\012" +
    "\016\013\010\014\024\016\043\017\021\020\040\021\037" +
    "\022\011\001\001\000\034\004\103\005\107\006\110\010" +
    "\112\011\111\012\104\013\101\014\106\016\116\017\105" +
    "\020\114\021\113\022\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\231\004\013\005\025\006\027\010\033\011\031\012" +
    "\016\013\010\014\024\016\043\017\021\020\040\021\037" +
    "\022\011\001\001\000\034\004\103\005\107\006\110\010" +
    "\112\011\111\012\104\013\101\014\106\016\116\017\105" +
    "\020\114\021\113\022\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\237\004\013\005\025\006\027\010\033\011\031\012" +
    "\016\013\010\014\024\016\043\017\021\020\040\021\037" +
    "\022\011\001\001\000\034\004\103\005\107\006\110\010" +
    "\112\011\111\012\104\013\101\014\106\016\116\017\105" +
    "\020\114\021\113\022\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\245\004\013\005\025\006\027\010\033\011\031\012" +
    "\016\013\010\014\024\016\043\017\021\020\040\021\037" +
    "\022\011\001\001\000\034\004\103\005\107\006\110\010" +
    "\112\011\111\012\104\013\101\014\106\016\116\017\105" +
    "\020\114\021\113\022\102\001\001\000\002\001\001\000" +
    "\036\003\250\004\013\005\025\006\027\010\033\011\031" +
    "\012\016\013\010\014\024\016\043\017\021\020\040\021" +
    "\037\022\011\001\001\000\034\004\103\005\107\006\110" +
    "\010\112\011\111\012\104\013\101\014\106\016\116\017" +
    "\105\020\114\021\113\022\102\001\001\000\002\001\001" +
    "\000\036\003\253\004\013\005\025\006\027\010\033\011" +
    "\031\012\016\013\010\014\024\016\043\017\021\020\040" +
    "\021\037\022\011\001\001\000\034\004\103\005\107\006" +
    "\110\010\112\011\111\012\104\013\101\014\106\016\116" +
    "\017\105\020\114\021\113\022\102\001\001\000\002\001" +
    "\001\000\036\003\256\004\013\005\025\006\027\010\033" +
    "\011\031\012\016\013\010\014\024\016\043\017\021\020" +
    "\040\021\037\022\011\001\001\000\034\004\103\005\107" +
    "\006\110\010\112\011\111\012\104\013\101\014\106\016" +
    "\116\017\105\020\114\021\113\022\102\001\001\000\002" +
    "\001\001\000\036\003\261\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\036\003\264\004\013\005\025\006\027" +
    "\010\033\011\031\012\016\013\010\014\024\016\043\017" +
    "\021\020\040\021\037\022\011\001\001\000\034\004\103" +
    "\005\107\006\110\010\112\011\111\012\104\013\101\014" +
    "\106\016\116\017\105\020\114\021\113\022\102\001\001" +
    "\000\002\001\001\000\004\015\270\001\001\000\004\022" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\103\005\107\006\110\010\112\011" +
    "\111\012\104\013\101\014\106\016\116\017\105\020\114" +
    "\021\113\022\102\001\001\000\004\007\327\001\001\000" +
    "\002\001\001\000\004\007\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u0113\004\013\005\025\006\027\010\033" +
    "\011\031\012\016\013\010\014\024\016\043\017\021\020" +
    "\040\021\037\022\011\001\001\000\036\003\u010b\004\013" +
    "\005\025\006\027\010\033\011\031\012\016\013\010\014" +
    "\024\016\043\017\021\020\040\021\037\022\011\001\001" +
    "\000\036\003\u0103\004\013\005\025\006\027\010\033\011" +
    "\031\012\016\013\010\014\024\016\043\017\021\020\040" +
    "\021\037\022\011\001\001\000\036\003\373\004\013\005" +
    "\025\006\027\010\033\011\031\012\016\013\010\014\024" +
    "\016\043\017\021\020\040\021\037\022\011\001\001\000" +
    "\034\004\103\005\107\006\110\010\112\011\111\012\104" +
    "\013\101\014\106\016\116\017\105\020\114\021\113\022" +
    "\102\001\001\000\002\001\001\000\004\015\376\001\001" +
    "\000\002\001\001\000\036\003\u0100\004\013\005\025\006" +
    "\027\010\033\011\031\012\016\013\010\014\024\016\043" +
    "\017\021\020\040\021\037\022\011\001\001\000\034\004" +
    "\103\005\107\006\110\010\112\011\111\012\104\013\101" +
    "\014\106\016\116\017\105\020\114\021\113\022\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\103" +
    "\005\107\006\110\010\112\011\111\012\104\013\101\014" +
    "\106\016\116\017\105\020\114\021\113\022\102\001\001" +
    "\000\002\001\001\000\004\015\u0106\001\001\000\002\001" +
    "\001\000\036\003\u0108\004\013\005\025\006\027\010\033" +
    "\011\031\012\016\013\010\014\024\016\043\017\021\020" +
    "\040\021\037\022\011\001\001\000\034\004\103\005\107" +
    "\006\110\010\112\011\111\012\104\013\101\014\106\016" +
    "\116\017\105\020\114\021\113\022\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\103\005\107\006" +
    "\110\010\112\011\111\012\104\013\101\014\106\016\116" +
    "\017\105\020\114\021\113\022\102\001\001\000\002\001" +
    "\001\000\004\015\u010e\001\001\000\002\001\001\000\036" +
    "\003\u0110\004\013\005\025\006\027\010\033\011\031\012" +
    "\016\013\010\014\024\016\043\017\021\020\040\021\037" +
    "\022\011\001\001\000\034\004\103\005\107\006\110\010" +
    "\112\011\111\012\104\013\101\014\106\016\116\017\105" +
    "\020\114\021\113\022\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\103\005\107\006\110\010\112" +
    "\011\111\012\104\013\101\014\106\016\116\017\105\020" +
    "\114\021\113\022\102\001\001\000\002\001\001\000\004" +
    "\015\u0116\001\001\000\002\001\001\000\036\003\u0118\004" +
    "\013\005\025\006\027\010\033\011\031\012\016\013\010" +
    "\014\024\016\043\017\021\020\040\021\037\022\011\001" +
    "\001\000\034\004\103\005\107\006\110\010\112\011\111" +
    "\012\104\013\101\014\106\016\116\017\105\020\114\021" +
    "\113\022\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\u0132\004\013\005" +
    "\025\006\027\010\033\011\031\012\016\013\010\014\024" +
    "\016\043\017\021\020\040\021\037\022\011\001\001\000" +
    "\002\001\001\000\034\004\103\005\107\006\110\010\112" +
    "\011\111\012\104\013\101\014\106\016\116\017\105\020" +
    "\114\021\113\022\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u0138\004\013\005\025\006\027\010\033\011\031\012\016" +
    "\013\010\014\024\016\043\017\021\020\040\021\037\022" +
    "\011\001\001\000\034\004\103\005\107\006\110\010\112" +
    "\011\111\012\104\013\101\014\106\016\116\017\105\020" +
    "\114\021\113\022\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\u013c\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\u0140\004\013" +
    "\005\025\006\027\010\033\011\031\012\016\013\010\014" +
    "\024\016\043\017\021\020\040\021\037\022\011\001\001" +
    "\000\034\004\103\005\107\006\110\010\112\011\111\012" +
    "\104\013\101\014\106\016\116\017\105\020\114\021\113" +
    "\022\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0148\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u0151\004\013\005\025\006\027\010\033" +
    "\011\031\012\016\013\010\014\024\016\043\017\021\020" +
    "\040\021\037\022\011\001\001\000\034\004\103\005\107" +
    "\006\110\010\112\011\111\012\104\013\101\014\106\016" +
    "\116\017\105\020\114\021\113\022\102\001\001\000\036" +
    "\003\u0162\004\013\005\025\006\027\010\033\011\031\012" +
    "\016\013\010\014\024\016\043\017\021\020\040\021\037" +
    "\022\011\001\001\000\004\007\u0155\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\u0157\004\013\005\025" +
    "\006\027\010\033\011\031\012\016\013\010\014\024\016" +
    "\043\017\021\020\040\021\037\022\011\001\001\000\034" +
    "\004\103\005\107\006\110\010\112\011\111\012\104\013" +
    "\101\014\106\016\116\017\105\020\114\021\113\022\102" +
    "\001\001\000\036\003\u0160\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\004\007\u015a\001" +
    "\001\000\002\001\001\000\036\003\u015c\004\013\005\025" +
    "\006\027\010\033\011\031\012\016\013\010\014\024\016" +
    "\043\017\021\020\040\021\037\022\011\001\001\000\034" +
    "\004\103\005\107\006\110\010\112\011\111\012\104\013" +
    "\101\014\106\016\116\017\105\020\114\021\113\022\102" +
    "\001\001\000\036\003\u015e\004\013\005\025\006\027\010" +
    "\033\011\031\012\016\013\010\014\024\016\043\017\021" +
    "\020\040\021\037\022\011\001\001\000\034\004\103\005" +
    "\107\006\110\010\112\011\111\012\104\013\101\014\106" +
    "\016\116\017\105\020\114\021\113\022\102\001\001\000" +
    "\002\001\001\000\034\004\103\005\107\006\110\010\112" +
    "\011\111\012\104\013\101\014\106\016\116\017\105\020" +
    "\114\021\113\022\102\001\001\000\002\001\001\000\034" +
    "\004\103\005\107\006\110\010\112\011\111\012\104\013" +
    "\101\014\106\016\116\017\105\020\114\021\113\022\102" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        System.out.println("Error encontrado");
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    // para guardar todo lo que se traduce 
    public String Python = "Codigo en python \n";
    public int InicioEstado = 1;
    
    public static Nodo raiz;
    // para retornar la raiz 
    public Nodo getRaiz(){
        return raiz;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicioAnalisis SENTENCIA finAnalisis 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            if (InicioEstado==1){
            Python += A;System.out.println(Python);} 

            if (InicioEstado==2){ parser.raiz = (Nodo) A; }
             

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        } 
           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= CONDICIONALSI 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA CONDICIONALSI 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SELECCIONMULTIPLE 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
          
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA SELECCIONMULTIPLE 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= CICLOPARA 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA CICLOPARA 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= CICLOMIENTRAS 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA CICLOMIENTRAS 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= CICLOREPETIR 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA CICLOREPETIR 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
       
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA FUNCION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= LLAMADAFUNMET 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
       
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA LLAMADAFUNMET 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }     
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IMPRESION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
          
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA IMPRESION 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= RETORAR 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
          
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA RETORAR 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= ARITMETICA 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A);} 
    if (InicioEstado==2){
    // Enviando declaracion y sentencia como string 
    RESULT = A;} 
      
           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA ARITMETICA 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf(A)+String.valueOf(B);}
             if (InicioEstado==2){
            // Enviando declaracion y sentencia como string 
            Nodo padre = new Nodo("SENTENCIA", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo((Nodo)B); 
            RESULT = padre;
        }  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Ingresar Identificador Como Numeroo ConValor Numero PuntoComa 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(Y) + "=" + String.valueOf(T) + String.valueOf(U)+ "\n";}
    

// este es para el arbol 
    if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("DECLARACION", "", 0,0);
            padre.AddHijo(new Nodo("Ingresar",      (String)X, Xright, Xleft));
            padre.AddHijo(new Nodo("Identificador", (String)Y, Yright, Yleft));
            padre.AddHijo(new Nodo("Como",          (String)Z, Zright, Zleft));
            padre.AddHijo(new Nodo("Numeroo",        (String)W, Wright, Wleft));
            padre.AddHijo(new Nodo("ConValor",       (String)R, Rright, Rleft));
            padre.AddHijo(new Nodo("Numero",         (String)T, Tright, Tleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)U, Uright, Uleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Ingresar Identificador Como TipoCadena ConValor Cadena PuntoComa 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(Y) + "=" + String.valueOf(T)+ "\n";} 
                
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("DECLARACION", "", 0,0);
            padre.AddHijo(new Nodo("Ingresar",      (String)X, Xright, Xleft));
            padre.AddHijo(new Nodo("Identificador", (String)Y, Yright, Yleft));
            padre.AddHijo(new Nodo("Como",          (String)Z, Zright, Zleft));
            padre.AddHijo(new Nodo("TipoCadena",     (String)W, Wright, Wleft));
            padre.AddHijo(new Nodo("ConValor",       (String)R, Rright, Rleft));
            padre.AddHijo(new Nodo("Cadena",         (String)T, Tright, Tleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)U, Uright, Uleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Ingresar Identificador Como Car ConValor Caracter PuntoComa 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(Y) + "=" + String.valueOf(T)+ "\n";}

            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("DECLARACION", "", 0,0);
            padre.AddHijo(new Nodo("Ingresar",      (String)X, Xright, Xleft));
            padre.AddHijo(new Nodo("Identificador", (String)Y, Yright, Yleft));
            padre.AddHijo(new Nodo("Como",          (String)Z, Zright, Zleft));
            padre.AddHijo(new Nodo("Car",             (String)W, Wright, Wleft));
            padre.AddHijo(new Nodo("ConValor",       (String)R, Rright, Rleft));
            padre.AddHijo(new Nodo("Caracter",         (String)T, Tright, Tleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)U, Uright, Uleft));
            RESULT = padre;}
            

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Ingresar Identificador Como Boolean ConValor Verdadero PuntoComa 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(Y) + "=" + String.valueOf(T)+ "\n";} 
            
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("DECLARACION", "", 0,0);
            padre.AddHijo(new Nodo("Ingresar",      (String)X, Xright, Xleft));
            padre.AddHijo(new Nodo("Identificador", (String)Y, Yright, Yleft));
            padre.AddHijo(new Nodo("Como",          (String)Z, Zright, Zleft));
            padre.AddHijo(new Nodo("Boolean",     (String)W, Wright, Wleft));
            padre.AddHijo(new Nodo("ConValor",       (String)R, Rright, Rleft));
            padre.AddHijo(new Nodo("Verdadero",         (String)T, Tright, Tleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)U, Uright, Uleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Ingresar Identificador Como Boolean ConValor Falso PuntoComa 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(Y) + "=" + String.valueOf(T)+ "\n";}  

// para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("DECLARACION", "", 0,0);
            padre.AddHijo(new Nodo("Ingresar",      (String)X, Xright, Xleft));
            padre.AddHijo(new Nodo("Identificador", (String)Y, Yright, Yleft));
            padre.AddHijo(new Nodo("Como",          (String)Z, Zright, Zleft));
            padre.AddHijo(new Nodo("Boolean",     (String)W, Wright, Wleft));
            padre.AddHijo(new Nodo("ConValor",       (String)R, Rright, Rleft));
            padre.AddHijo(new Nodo("Falso",         (String)T, Tright, Tleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)U, Uright, Uleft));
            RESULT = padre;} 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= Identificador Asignar Numero PuntoComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A) + "=" + String.valueOf(I)+ String.valueOf(O)+ "\n";} 
            

        // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ASIGNACION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Asignar",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Numero",          (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)O, Oright, Oleft));
            RESULT = padre;}
            

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= Identificador Asignar Cadena PuntoComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A) + "=" + String.valueOf(I)+ String.valueOf(O)+ "\n";}

            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ASIGNACION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Asignar",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Cadena",          (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)O, Oright, Oleft));
            RESULT = padre;}
            

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= Identificador Asignar Caracter PuntoComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A) + "=" + String.valueOf(I)+ String.valueOf(O)+ "\n";}  
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ASIGNACION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Asignar",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Caracter",          (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)O, Oright, Oleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= Identificador Asignar Verdadero PuntoComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A) + "=" + String.valueOf(I)+ String.valueOf(O)+ "\n";}  
              // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ASIGNACION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Asignar",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Veradero",          (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)O, Oright, Oleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= Identificador Asignar Falso PuntoComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A) + "=" + String.valueOf(I)+ String.valueOf(O)+ "\n";}  
              // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ASIGNACION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Asignar",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Falso",          (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)O, Oright, Oleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= Identificador Asignar Identificador PuntoComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A) + "=" + String.valueOf(I)+ String.valueOf(O)+  "\n";} 
              // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ASIGNACION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Asignar",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Identificador",          (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)O, Oright, Oleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= Numero Asignar Numero PuntoComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A) + "=" + String.valueOf(I)+ String.valueOf(O)+ "\n";}  
            
              // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ASIGNACION", "", 0,0);
            padre.AddHijo(new Nodo("Numero",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Asignar",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Numero",          (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)O, Oright, Oleft));
            RESULT = padre;}
            

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICIONALSI ::= Si CONDICION Entonces SENTENCIA FinSi 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(" if ") + String.valueOf(" " +B +" ")+ String.valueOf(D)+ "\n";}
        
            // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICIONALSI", "", 0,0);
            padre.AddHijo(new Nodo("SI",            (String)A, Aright, Aleft));
            padre.AddHijo((Nodo)B);
            padre.AddHijo(new Nodo("Entonces",      (String)C, Cright, Cleft));
            padre.AddHijo((Nodo)D);
            padre.AddHijo(new Nodo("FinSi",         (String)E, Eright, Eleft));
            RESULT = padre;} 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICIONALSI ::= Si CONDICION Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(" if ") + String.valueOf(B)+ String.valueOf(D) + String.valueOf(" else ")+ String.valueOf(F)+ String.valueOf(G)+"\n";}   
          // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICIONALSI", "", 0,0);
            padre.AddHijo(new Nodo("SI",            (String)A, Aright, Aleft));
            padre.AddHijo((Nodo)B);
            padre.AddHijo(new Nodo("Entonces",      (String)C, Cright, Cleft));
            padre.AddHijo((Nodo)D);
            padre.AddHijo(new Nodo("DeloContrario",         (String)E, Eright, Eleft));
            padre.AddHijo((Nodo)F);
            padre.AddHijo(new Nodo("FinSi",         (String)G, Gright, Gleft));
            RESULT = padre;} 
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONALSI ::= Si CONDICION Entonces SENTENCIA Osi CONDICION Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object J = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object K = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(" if ") + String.valueOf(B)+ String.valueOf(D) + String.valueOf(" elif ")+  String.valueOf(F)+ 
                    String.valueOf(H)+  String.valueOf(" else ") + String.valueOf(J)+"\n";}  
                     // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICIONALSI", "", 0,0);
            padre.AddHijo(new Nodo("SI",                (String)A, Aright, Aleft));
            padre.AddHijo((Nodo)B);
            padre.AddHijo(new Nodo("Entonces",          (String)C, Cright, Cleft));
            padre.AddHijo((Nodo)D);
            padre.AddHijo(new Nodo("Osi",               (String)E, Eright, Eleft));
            padre.AddHijo((Nodo)F);
            padre.AddHijo(new Nodo("Entonces",         (String)G, Gright, Gleft));
            padre.AddHijo((Nodo)H);
            padre.AddHijo(new Nodo("DeLoContrario",         (String)I, Iright, Ileft));
            padre.AddHijo((Nodo)J);
            padre.AddHijo(new Nodo("FinSi",                 (String)K, Kright, Kleft));
            RESULT = padre;} 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONALSI ::= Si CONDICION Entonces SENTENCIA Osi CONDICION Entonces SENTENCIA Osi CONDICION Entonces SENTENCIA DeloContrario SENTENCIA FinSi 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object J = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object K = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object M = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object N = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(" if ") + String.valueOf(B)+ String.valueOf(D) + String.valueOf(" elif ")+  String.valueOf(F)+ 
                    String.valueOf(H)+ String.valueOf(" elif ") +  String.valueOf(L)+ String.valueOf(N) + "\n";}   
        if (InicioEstado==2){
            // RAIZ no SALE EL OSI OSI OSI
            Nodo padre = new Nodo("CONDICIONALSI", "", 0,0);
            padre.AddHijo(new Nodo("SI",                    (String)A, Aright, Aleft));
            padre.AddHijo((Nodo)B);
            padre.AddHijo(new Nodo("Entonces",              (String)C, Cright, Cleft));
            padre.AddHijo((Nodo)D);
            padre.AddHijo(new Nodo("Osi",                   (String)E, Eright, Eleft));
            padre.AddHijo((Nodo)F);
            padre.AddHijo(new Nodo("Entonces",              (String)G, Gright, Gleft));
            padre.AddHijo((Nodo)H);
            padre.AddHijo(new Nodo("Osi",                   (String)I, Iright, Ileft));
            padre.AddHijo((Nodo)J);
            padre.AddHijo(new Nodo("Entonces",              (String)K, Kright, Kleft));
            padre.AddHijo((Nodo)L);
            padre.AddHijo(new Nodo("DeLoContrario",         (String)M, Mright, Mleft));
            padre.AddHijo((Nodo)N);
            padre.AddHijo(new Nodo("FinSi",                 (String)O, Oright, Oleft));
            RESULT = padre;} 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONALSI ::= error FinSi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALSI",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= Identificador OperadorRelacional Identificador 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(E) + String.valueOf(I)+ "\n";} 
                // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",            (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("OperadorRelacional",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Identificador",             (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= Identificador OperadorRelacional Numero 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(E) + String.valueOf(I)+ "\n";}

        // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICION", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",            (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("OperadorRelacional",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Numero",             (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= Numero OperadorRelacional Identificador 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(E) + String.valueOf(I)+ "\n";}

                // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICION", "", 0,0);
            padre.AddHijo(new Nodo("Numero",            (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("OperadorRelacional",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Identificador",             (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= Numero OperadorRelacional Numero 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(E) + String.valueOf(I)+ "\n";}   
        
                // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICION", "", 0,0);
            padre.AddHijo(new Nodo("Numero",            (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("OperadorRelacional",       (String)E, Eright, Eleft));
            padre.AddHijo(new Nodo("Numero",             (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= Verdadero 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +"\n";}   
                // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICION", "", 0,0);
            padre.AddHijo(new Nodo("Verdadero",   (String)A, Aright, Aleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= Falso 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A)+"\n";}   
                
                        // PARA EL ARBOL
         if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CONDICION", "", 0,0);
            padre.AddHijo(new Nodo("Verdadero",   (String)A, Aright, Aleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SELECCIONMULTIPLE ::= Segun Numero Hacer InterrogacionA Numero InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SELECCIONMULTIPLE ::= Segun Numero Hacer InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SELECCIONMULTIPLE ::= Segun Numero Hacer InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-21)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SELECCIONMULTIPLE ::= Segun Numero Hacer InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SELECCIONMULTIPLE ::= Segun Numero Hacer InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA InterrogacionA Numero InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-31)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SELECCIONMULTIPLE ::= Segun Identificador Hacer InterrogacionA Identificador InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SELECCIONMULTIPLE ::= Segun Identificador Hacer InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SELECCIONMULTIPLE ::= Segun Identificador Hacer InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-21)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SELECCIONMULTIPLE ::= Segun Identificador Hacer InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-26)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SELECCIONMULTIPLE ::= Segun Identificador Hacer InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA InterrogacionA Identificador InterrogacionC Entonces SENTENCIA DeloContrario Entonces SENTENCIA FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-31)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SELECCIONMULTIPLE ::= error FinSegun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCIONMULTIPLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CICLOPARA ::= Para Identificador Asignar Identificador Hasta Identificador Hacer SENTENCIA FinPara 
            {
              Object RESULT =null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object J = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf("for ") + String.valueOf(B)+ String.valueOf(" in ")+ 
                String.valueOf(C)+ String.valueOf(": ") + "\n"+ String.valueOf(E)+ "\n";} 

           // PARA EL ARBOL
        if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOPARA", "", 0,0);
            padre.AddHijo(new Nodo("PARA",                  (String)F, Fright, Fleft));
            padre.AddHijo(new Nodo("Identificador",         (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Asignar",               (String)G, Gright, Gleft));
            padre.AddHijo(new Nodo("Identificador",         (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("Hasta",                 (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Identificador",         (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Hacer",                 (String)I, Iright, Ileft));
            padre.AddHijo((Nodo)E);
            padre.AddHijo(new Nodo("FinPara",               (String)J, Jright, Jleft));
            RESULT = padre;} 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOPARA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CICLOPARA ::= Para Identificador Asignar Identificador Hasta Identificador Hacer FinPara 
            {
              Object RESULT =null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object J = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf("for ") + String.valueOf(B)+ String.valueOf(" in ")+ 
                String.valueOf(C)+ String.valueOf(": ") + "\n"+"//NULL ";} 

            // PARA EL ARBOL
        if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOPARA", "", 0,0);
            padre.AddHijo(new Nodo("PARA",                  (String)F, Fright, Fleft));
            padre.AddHijo(new Nodo("Identificador",         (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Asignar",               (String)G, Gright, Gleft));
            padre.AddHijo(new Nodo("Identificador",         (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("Hasta",                 (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Identificador",         (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Hacer",                 (String)I, Iright, Ileft));
            padre.AddHijo(new Nodo("FinPara",               (String)J, Jright, Jleft));
            RESULT = padre;} 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOPARA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CICLOPARA ::= Para Identificador Asignar Numero Hasta Numero Hacer SENTENCIA FinPara 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object J = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf("for ") + String.valueOf(B)+ String.valueOf(" in range ")+ 
                   String.valueOf(C)+String.valueOf(" , ") +String.valueOf(F)+ String.valueOf(": ") +
                 "\n"+ String.valueOf(E)+ "\n";}   

              // PARA EL ARBOL
        if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOPARA", "", 0,0);
            padre.AddHijo(new Nodo("PARA",                  (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Identificador",         (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Asignar",               (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Numero",                (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("Hasta",                  (String)D, Dright, Dleft));   
            padre.AddHijo(new Nodo("Numero",                 (String)F, Fright, Fleft));
            padre.AddHijo(new Nodo("Hacer",                 (String)G, Gright, Gleft));
            padre.AddHijo((Nodo)E);
            padre.AddHijo(new Nodo("FinPara",               (String)J, Jright, Jleft));
            RESULT = padre;}      

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOPARA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CICLOPARA ::= Para Identificador Asignar Numero Hasta Numero ConIncremental Numero Hacer SENTENCIA FinPara 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Jleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Jright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object J = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Kleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Kright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object K = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		        
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf("for ") + String.valueOf(B)+ String.valueOf(" in range ")+ 
                   String.valueOf(C)+String.valueOf(" , ") +String.valueOf(F)+ " ++ " +String.valueOf(X)+" : "+
                 "\n"+ String.valueOf(J)+ "\n";}   

              // PARA EL ARBOL
        if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOPARA", "", 0,0);
            padre.AddHijo(new Nodo("PARA",                  (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Identificador",         (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Asignar",               (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Numero",                (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("Hasta",                  (String)D, Dright, Dleft));   
            padre.AddHijo(new Nodo("Numero",                 (String)F, Fright, Fleft));
            padre.AddHijo(new Nodo("ConIncremental",          (String)G, Gright, Gleft));
            padre.AddHijo(new Nodo("Numero",                 (String)X, Xright, Xleft));
            padre.AddHijo(new Nodo("Hacer",                 (String)I, Iright, Ileft));
            padre.AddHijo((Nodo)J);
            padre.AddHijo(new Nodo("FinPara",               (String)K, Kright, Kleft));
            RESULT = padre;}   

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOPARA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CICLOPARA ::= error FinPara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOPARA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CICLOMIENTRAS ::= Mientras CONDICION Hacer SENTENCIA FinMientras 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf("while") + String.valueOf(A)+":"+ String.valueOf(B);} 
               // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOMIENTRAS", "", 0,0);
            padre.AddHijo(new Nodo("Mientras",      (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("Hacer",       (String)E, Eright, Eleft));
            padre.AddHijo((Nodo)B);          
            padre.AddHijo(new Nodo("FinMientras",     (String)C, Cright, Cleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CICLOMIENTRAS ::= Mientras CONDICION Hacer FinMientras 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf("while")+ String.valueOf(A)+":"+ "\n"+"//NULL ";}
                // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOMIENTRAS", "", 0,0);
            padre.AddHijo(new Nodo("Mientras",      (String)C, Cright, Cleft));
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("Hacer",       (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("FinMientras",     (String)C, Cright, Cleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CICLOMIENTRAS ::= error FinMientras 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CICLOREPETIR ::= Repetir SENTENCIA HastaQue CONDICION 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf("while  ") + String.valueOf(A)+ ":" + String.valueOf(B);}   
                // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOREPETIR", "", 0,0);
            padre.AddHijo(new Nodo("Repetir",      (String)C, Cright, Cleft));
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("HastaQue",       (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)B);
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CICLOREPETIR ::= Repetir HastaQue CONDICION 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf("while") +"\n"+ String.valueOf(A)+ ":";} 
                // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("CICLOREPETIR", "", 0,0);
            padre.AddHijo(new Nodo("Repetir",      (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("HastaQue",       (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)A);
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CICLOREPETIR ::= error CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODO ::= Metodo Identificador SENTENCIA FinMetodo 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = String.valueOf("def ") + String.valueOf(A)+ "():" + "\n"+String.valueOf(B)+ "\n";}   
        
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("METODO", "", 0,0);
            padre.AddHijo(new Nodo("Metodo",      (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("Identificador",       (String)A, Aright, Aleft));
            padre.AddHijo((Nodo)B);
            padre.AddHijo(new Nodo("FinMetodo",      (String)D, Dright, Dleft));
            RESULT = padre;}



              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODO ::= Metodo Identificador ConParametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinMetodo 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
    // Enviando declaracion y sentencia como string 
    RESULT = String.valueOf("def ") + String.valueOf(X)+"("+ String.valueOf(Y)+")"
    + "\n"+String.valueOf(Z) ;}   
     // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("METODO", "", 0,0);
            padre.AddHijo(new Nodo("Metodo",               (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Identificador",       (String)X, Xright, Xleft));
            padre.AddHijo(new Nodo("ConParametros",       (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("ParentesisA",       (String)C, Cright, Cleft));
            padre.AddHijo((Nodo)Y);
            padre.AddHijo(new Nodo("ParentesisC",       (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)Z);
            padre.AddHijo(new Nodo("FinMetodo",      (String)F, Fright, Fleft));
            RESULT = padre;}


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // METODO ::= error FinMetodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= Funcion Identificador Numeroo SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+ String.valueOf(A)+"():" +"   \n"+ String.valueOf(C)+
            "return" + "\n";}
   
             // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Numeroo",            (String)B, Bright, Bleft));
            padre.AddHijo((Nodo)C);
            padre.AddHijo(new Nodo("FinFuncion",         (String)E, Eright, Eleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCION ::= Funcion Identificador TipoCadena SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+  String.valueOf(A)+"():" +"   \n"+  String.valueOf(C)+
            "return" + "\n";}   
            
             // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("TipoCadena",            (String)B, Bright, Bleft));
            padre.AddHijo((Nodo)C);
            padre.AddHijo(new Nodo("FinFuncion",         (String)E, Eright, Eleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCION ::= Funcion Identificador Boolean SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+  String.valueOf(A)+"():" +"   \n"+  String.valueOf(C)+
            "return" + "\n";}   
         // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Boolean",            (String)B, Bright, Bleft));
            padre.AddHijo((Nodo)C);
            padre.AddHijo(new Nodo("FinFuncion",         (String)E, Eright, Eleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCION ::= Funcion Identificador Car SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+  String.valueOf(A)+"():" +"   \n"+  String.valueOf(C)+
            "return" + "\n";}   
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Car",            (String)B, Bright, Bleft));
            padre.AddHijo((Nodo)C);
            padre.AddHijo(new Nodo("FinFuncion",         (String)E, Eright, Eleft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCION ::= Funcion Identificador Numeroo ConParametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+  String.valueOf(A)+ "(" + String.valueOf(E)+ ")"+
            "\n"+ "return " +"\n"+  String.valueOf(G) ;}   
             // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Numeroo",            (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("ConParametros",      (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("ParentesisA",         (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)E);
            padre.AddHijo(new Nodo("ParentesisC",            (String)F, Fright, Fleft));
            padre.AddHijo((Nodo)G);
            padre.AddHijo(new Nodo("FinFuncion",         (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCION ::= Funcion Identificador Boolean ConParametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+  String.valueOf(A)+ "(" + String.valueOf(E)+ ")"+
            "\n"+ "return " +"\n"+  String.valueOf(G) ;}   
             // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Boolean",            (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("ConParametros",      (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("ParentesisA",         (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)E);
            padre.AddHijo(new Nodo("ParentesisC",            (String)F, Fright, Fleft));
            padre.AddHijo((Nodo)G);
            padre.AddHijo(new Nodo("FinFuncion",         (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCION ::= Funcion Identificador Car ConParametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+  String.valueOf(A)+ "(" + String.valueOf(E)+ ")"+
            "\n"+ "return " +"\n"+  String.valueOf(G) ;}   
             // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Caracter",            (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("ConParametros",      (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("ParentesisA",         (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)E);
            padre.AddHijo(new Nodo("ParentesisC",            (String)F, Fright, Fleft));
            padre.AddHijo((Nodo)G);
            padre.AddHijo(new Nodo("FinFuncion",         (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCION ::= Funcion Identificador TipoCadena ConParametros ParentesisA PARAMETROS ParentesisC SENTENCIA FinFuncion 
            {
              Object RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object H = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT = String.valueOf("def ")+  String.valueOf(A)+ "(" + String.valueOf(E)+ ")"+
            "\n"+ "return " +"\n"+  String.valueOf(G) ;}   
             // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("FUNCION", "", 0,0);
            padre.AddHijo(new Nodo("Funcion",            (String)H, Hright, Hleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("TipoCadena",            (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("ConParametros",      (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("ParentesisA",         (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)E);
            padre.AddHijo(new Nodo("ParentesisC",            (String)F, Fright, Fleft));
            padre.AddHijo((Nodo)G);
            padre.AddHijo(new Nodo("FinFuncion",         (String)I, Iright, Ileft));
            RESULT = padre;}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION ::= error FinFuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETROS ::= Identificador Numeroo 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(B);}  
        // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Numeroo",       (String)B, Bright, Bleft));
            RESULT = padre;}
                
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROS ::= PARAMETROS Coma Identificador Numeroo 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(D)+String.valueOf(B)+String.valueOf(C);}   
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("COMA",      (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Numeroo",       (String)C, Cright, Cleft));
            RESULT = padre;}


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROS ::= Identificador Boolean 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(B);}  
        // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("Boolean",       (String)B, Bright, Bleft));
            RESULT = padre;}
                
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROS ::= PARAMETROS Coma Identificador Boolean 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(D)+String.valueOf(B)+String.valueOf(C);}   
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("COMA",      (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Boolean",       (String)C, Cright, Cleft));
            RESULT = padre;}


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROS ::= Identificador Car 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(B);}  
        // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("CARACTER",       (String)B, Bright, Bleft));
            RESULT = padre;}
                
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROS ::= PARAMETROS Coma Identificador Car 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(D)+String.valueOf(B)+String.valueOf(C);}   
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("COMA",      (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Caracter",       (String)C, Cright, Cleft));
            RESULT = padre;}


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROS ::= Identificador TipoCadena 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(B);}  
        // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("CARACTER",       (String)B, Bright, Bleft));
            RESULT = padre;}
                
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROS ::= PARAMETROS Coma Identificador TipoCadena 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) +String.valueOf(D)+String.valueOf(B)+String.valueOf(C);}   
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("PARAMETROS", "", 0,0);
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("COMA",      (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Caracter",       (String)C, Cright, Cleft));
            RESULT = padre;}


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LLAMADAFUNMET ::= Ejecutar Identificador ParentesisA ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A)+"():" +"\n";} 
         // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("LLAMADAFUNMET", "", 0,0);
            padre.AddHijo(new Nodo("Ejecutar",       (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("ParentesisA",      (String)C, Cright, Cleft));
            padre.AddHijo(new Nodo("ParentesisC",      (String)D, Dright, Dleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)E, Eright, Eleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNMET",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LLAMADAFUNMET ::= Ejecutar Identificador PARAMETROS ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNMET",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAMADAFUNMET ::= Ejecutar Identificador ParentesisA ARITMETICA ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(A)+"(" +String.valueOf(B)+ ")";}  
            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("LLAMADAFUNMET", "", 0,0);
            padre.AddHijo(new Nodo("Ejecutar",      (String)C, Cright,Cleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright, Aleft));
            padre.AddHijo(new Nodo("ParentesisA",      (String)D, Dright, Dleft));
            padre.AddHijo((Nodo)B);
            padre.AddHijo(new Nodo("ParentesisC",      (String)C, Cright, Cleft));           
            padre.AddHijo(new Nodo("PuntoComa",       (String)F, Fright, Fleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNMET",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IMPRESION ::= Imprimir Identificador PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "print(" + String.valueOf(A) + ")" +"\n";} 

            // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("IMPRESION", "", 0,0);
            padre.AddHijo(new Nodo("Imprimir",      (String)B, Bright,Bleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)C, Cright,Cleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IMPRESION ::= Imprimir Cadena PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "print(" + String.valueOf(A) + ")" +"\n";}
                // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("IMPRESION", "", 0,0);
            padre.AddHijo(new Nodo("Imprimir",      (String)B, Bright,Bleft));
            padre.AddHijo(new Nodo("Cadena",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)C, Cright,Cleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IMPRESION ::= ImprimirSalto Cadena PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "print_nl(" + String.valueOf(A) + ")" +"\n";}
                // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("IMPRESION", "", 0,0);
            padre.AddHijo(new Nodo("ImprimirSalto",      (String)B, Bright,Bleft));
            padre.AddHijo(new Nodo("Cadena",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)C, Cright,Cleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IMPRESION ::= ImprimirSalto Identificador PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "print(" + String.valueOf(A) + ")" +"\n";}   
                // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("IMPRESION", "", 0,0);
            padre.AddHijo(new Nodo("ImprimirSalto",      (String)B, Bright,Bleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)C, Cright,Cleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IMPRESION ::= ImprimirSalto ParentesisA Identificador ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "print(" + String.valueOf(B) + ")" +"\n";} 
                  // para el arbol
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("IMPRESION", "", 0,0);
            padre.AddHijo(new Nodo("ImprimirSalto",      (String)D, Dright,Dleft));
            padre.AddHijo(new Nodo("ParentesisA",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("Identificador",      (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("ParentesisC",      (String)C, Cright,Cleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)E, Eright,Eleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IMPRESION ::= ImprimirSalto ParentesisA Cadena ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "print(" + String.valueOf(B) + ")" +"\n";} 
                if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("IMPRESION", "", 0,0);
            padre.AddHijo(new Nodo("ImprimirSalto",      (String)D, Dright,Dleft));
            padre.AddHijo(new Nodo("ParentesisA",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("Cadena",      (String)B, Bright, Bleft));
            padre.AddHijo(new Nodo("ParentesisC",      (String)C, Cright,Cleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)E, Eright,Eleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IMPRESION ::= Imprimir Identificador ParentesisA ARITMETICA ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "print " + String.valueOf(A) + " " +"("+String.valueOf(B) +")"+"\n";} 
                // PARA EL ARBOL
                    if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("IMPRESION", "", 0,0);
            padre.AddHijo(new Nodo("Imprimir",      (String)D, Dright,Dleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("ParentesisA",     (String)C, Cright,Cleft));
            padre.AddHijo((Nodo)B);
            padre.AddHijo(new Nodo("ParentesisC",      (String)E, Eright,Eleft));
            padre.AddHijo(new Nodo("PuntoComa",      (String)F, Fright,Fleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETORAR ::= Retornar Identificador PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "return " + String.valueOf(A) +";"+"\n";} 
                // PARA EL ARBOL
                    if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("RETORAR", "", 0,0);
            padre.AddHijo(new Nodo("Retornar",      (String)B, Bright,Bleft));
            padre.AddHijo(new Nodo("Identificador",      (String)A, Aright,Aleft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)C, Cright,Cleft));
            RESULT = padre;}
                
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RETORAR ::= Retornar ParentesisA ARITMETICA ParentesisC PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "return " +"("+ String.valueOf(A)+")"+";" +"\n";}  
                    // PARA EL ARBOL
                    if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("RETORAR", "", 0,0);
            padre.AddHijo(new Nodo("Retornar",      (String)B, Bright,Bleft));
            padre.AddHijo(new Nodo("ParentesisA",      (String)D, Dright,Dleft));
             padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("ParentesisC",      (String)E, Eright,Eleft));
            padre.AddHijo(new Nodo("PuntoComa",     (String)C, Cright,Cleft));
            RESULT = padre;}
                
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RETORAR ::= Retornar CONDICION PuntoComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT = "return " +"("+ String.valueOf(A)+")"+";";}  
                      // PARA EL ARBOL
                    if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("RETORAR", "", 0,0);
            padre.AddHijo(new Nodo("Retornar",      (String)B, Bright,Bleft));
            padre.AddHijo((Nodo)A);
            padre.AddHijo(new Nodo("PuntoComa",     (String)C, Cright,Cleft));
            RESULT = padre;}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ARITMETICA ::= Numero 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    if (InicioEstado==1){
            // Enviando declaracion y sentencia como string 
            RESULT =  String.valueOf(X);}  
               // PARA EL ARBOL
            if (InicioEstado==2){
            // RAIZ
            Nodo padre = new Nodo("ARITMETICA", "", 0,0);
            padre.AddHijo(new Nodo("Numero",      (String)X, Xright,Xleft));
            RESULT = padre;}
            
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARITMETICA ::= ARITMETICA Suma Numero 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (InicioEstado==1){
                // Enviando declaracion y sentencia como string 
                RESULT =  String.valueOf(A) + "+"+ String.valueOf(B);}   
                 // para el arbol
            if (InicioEstado==2){
                // RAIZ
                Nodo padre = new Nodo("ARITMETICA", "", 0,0);
                  padre.AddHijo((Nodo)A);
                padre.AddHijo(new Nodo("Suma",      (String)C, Cright , Cleft));
                padre.AddHijo(new Nodo("Numero",      (String)B, Bright , Bleft));
                RESULT = padre;}
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARITMETICA ::= ARITMETICA Resta Numero 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            if (InicioEstado==1){
                    // Enviando declaracion y sentencia como string 
                    RESULT =  String.valueOf(X) + "-"+ String.valueOf(Y);}
            if (InicioEstado==2){
                // RAIZ
                Nodo padre = new Nodo("ARITMETICA", "", 0,0);
                padre.AddHijo((Nodo)X);
                padre.AddHijo(new Nodo("Resta",      (String)Z, Zright , Zleft));
                padre.AddHijo(new Nodo("Numero",      (String)Y, Yright , Yleft));
                RESULT = padre;}
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARITMETICA ::= ARITMETICA Multiplicacion Numero 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                if (InicioEstado==1){
                    // Enviando declaracion y sentencia como string 
                    RESULT =  String.valueOf(A) + "*"+ String.valueOf(E);} 
                    if (InicioEstado==2){
                        // RAIZ
                        Nodo padre = new Nodo("ARITMETICA", "", 0,0);
                        padre.AddHijo((Nodo)A);
                        padre.AddHijo(new Nodo("Multiplicacion",      (String)I, Iright , Ileft));
                        padre.AddHijo(new Nodo("Numero",      (String)E, Eright , Eleft));
                        RESULT = padre;}
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARITMETICA ::= ARITMETICA Division Numero 
            {
              Object RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object X = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object Y = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object Z = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (InicioEstado==1){
                        // Enviando declaracion y sentencia como string 
                        RESULT =  String.valueOf(X) + "/"+ String.valueOf(Z);} 
                        if (InicioEstado==2){
                            // RAIZ
                            Nodo padre = new Nodo("ARITMETICA", "", 0,0);
                            padre.AddHijo((Nodo)X);
                            padre.AddHijo(new Nodo("Division",      (String)Y, Yright , Yleft));
                            padre.AddHijo(new Nodo("Numero",      (String)Z, Zright , Zleft));
                            RESULT = padre;}
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARITMETICA ::= ParentesisA ARITMETICA ParentesisC 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (InicioEstado==1){
                        // Enviando declaracion y sentencia como string 
                        RESULT =  String.valueOf(A);}   
                        if (InicioEstado==2){
                        // RAIZ
                        Nodo padre = new Nodo("ARITMETICA", "", 0,0);
                        padre.AddHijo(new Nodo("ParentesisA",      (String)B , Bright , Bleft));
                        padre.AddHijo((Nodo)A);
                        padre.AddHijo(new Nodo("ParentesisC",      (String)C, Cright , Cleft));
                        RESULT = padre;}
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARITMETICA ::= error ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
